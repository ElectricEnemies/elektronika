///////////////////////////////////////////////////////////////////////////////
// (c) aestesis 2007 - code by renan jegouzo [aka YoY] - renan@aestesis.org
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// common input from elektronika

texture texture0;	// texture

float4	color;		// key color
float	power;			


///////////////////////////////////////////////////////////////////////////////

struct PS_INPUT
{
	float2 vTexCoord: TEXCOORD;
};

///////////////////////////////////////////////////////////////////////////////

sampler SceneColorSampler = sampler_state
{
	texture = (texture0);
	MipFilter = LINEAR;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

float4 ps_filter( PS_INPUT v ) : COLOR
{
	float4	c=tex2D( SceneColorSampler, v.vTexCoord.xy);
	
	float	r=c.r-color.r;
	float	g=(c.g-color.g)*0.7f;
	float	b=c.b-color.b;

	r*=r;
	g*=g;
	b*=b;
	
	float t=r+g+b;

	float	dist=sqrt(t)*(1.f-power)*10.f;
	float	va=c.a*(1.f-power*10.f)+(dist*dist*dist);
	
	c.a=va;
	
    return c;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

technique elektronika
{
	pass P0
	{
		PixelShader = compile ps_2_0 ps_filter();
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
