// ompp-chost.cpp : Defines the entry point for the DLL application.
//

#include "stdafx.h"
#include "ompp-chost.h"


#ifdef _MANAGED
#pragma managed(push, off)
#endif

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
    return TRUE;
}

#ifdef _MANAGED
#pragma managed(pop)
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#define					MAXMEDIABUFFER					(128)
////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct 
{
	MediaPluginInfo		*mpi;
	MediaPlugin			*mp;
	int					mediaType[MAXMEDIABUFFER];
	MediaBuffer			*media[MAXMEDIABUFFER];
	MediaHost			*mhost;
} OmppData;

////////////////////////////////////////////////////////////////////////////////////////////////////////

bool omppInfos(OmppData *handle, char *dll, char *sname)
{
	HINSTANCE	hDLL=LoadLibrary(dll);
	bool		b=false;
	if(hDLL)
	{
		MPgetMediaPluginVersion	*getVersion=(MPgetMediaPluginVersion *)GetProcAddress(hDLL, "getMediaPluginVersion");
		if(getVersion)
		{
			if(getVersion()==MPVERSION)
			{
				MPgetMediaPluginInfo	*getPlugz=(MPgetMediaPluginInfo *)GetProcAddress(hDLL, "getMediaPluginInfo");
				if(getPlugz)
				{
					MediaPluginInfo	*mpi=getPlugz();
					if(mpi)
					{
						char	name[MPSTRINGSIZE];
						if(mpi->getName(name))
						{
							if(!strcmp(name, sname))
							{
								handle->mpi=mpi;
								return true;
							}
						}
						delete(mpi);
					}
				}
			}
		}
		FreeLibrary(hDLL);
	}
	return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

OMPPCHOST_API void * __stdcall omppInit(char *name, int width, int height)
{
	bool		ok=false;
	OmppData	*handle=(OmppData *)malloc(sizeof(OmppData));
	memset(handle, 0, sizeof(OmppData));

	{ // add list of ompp effects
		struct _finddata_t		fd;
		char					path[1024];
		char					mpath[1024];
		GetModuleFileName(GetModuleHandle(NULL), path, sizeof(path));
		if(path[0])
		{
			char	*s=strrchr(path, '\\');
			if(s)
				*s=0;
		}
		strcpy(mpath, path);
		strcat(path, "\\ompp\\*.dll");
		intptr_t				h=_findfirst(path, &fd);
		if(h!=-1)
		{
			int		r=0;
			while(r!=-1)
			{
				char		str[256];
				sprintf(str, "%s\\ompp\\%s", mpath, fd.name);
				if(omppInfos(handle, str, name))
				{
					ok=true;
					break;
				}
				r=_findnext(h, &fd);
			}
			_findclose(h);
		}
	}

	handle->mhost=new MediaHost();

	if(ok)
	{
		handle->mp=handle->mpi->getNewInstance(handle->mhost);
		if(handle->mp)
		{
			int	i;
			int nbmedia=handle->mpi->getMediaCount();
			for(i=0; i<nbmedia; i++)
			{
				MediaInfo	mi=handle->mpi->getMediaInfo(i);
				switch(mi.type&MPmaskTYPE)
				{
					case MPmediaFLOAT:
					handle->media[i]=new MediaFloat();
					handle->mp->link(i, handle->media[i]);
					break;

					case MPmediaSELECT:
					handle->media[i]=new MediaSelect();
					handle->mp->link(i, handle->media[i]);
					break;
					
					case MPmediaBITMAP_XRGB:
					handle->media[i]=new MediaBitmap(width, height);
					handle->mp->link(i, handle->media[i]);
					break;
				}
			}
			return handle;
		}
	}
	omppFree(handle);
	return NULL;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

OMPPCHOST_API void __stdcall omppFree(void * h)
{
	OmppData *handle=(OmppData *)h;
	if(!handle)
		return;
	if(handle->mpi)
	{
		delete(handle->mpi);
		handle->mpi=NULL;
	}
	if(handle->mp)
	{
		delete(handle->mp);
		handle->mp=NULL;
	}
	{
		int i;
		for(i=0; i<MAXMEDIABUFFER; i++)
		{
			if(handle->media[i])
			{
				delete(handle->media[i]);
				handle->media[i]=NULL;
			}
		}
	}

	if(handle->mhost)
	{
		delete(handle->mhost);
		handle->mhost=NULL;
	}

	if(handle)
		free(handle);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

OMPPCHOST_API int __stdcall omppStart(void *handle)
{
	return (int)((OmppData *)handle)->mp->start();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

OMPPCHOST_API void __stdcall omppStop(void *handle)
{
	((OmppData *)handle)->mp->stop();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

OMPPCHOST_API int __stdcall omppProcessFrame(void *handle, double time, double beat)
{
	return (int)((OmppData *)handle)->mp->process(time, beat);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

OMPPCHOST_API int __stdcall omppGetNbMedia(void *handle)
{
	return ((OmppData *)handle)->mpi->getMediaCount();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

OMPPCHOST_API int __stdcall ommpGetMediaType(void *handle, int n)
{
	return ((OmppData *)handle)->mpi->getMediaInfo(n).type;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

OMPPCHOST_API int __stdcall		omppSelectGetNbDesc(void *handle, int nmedia)
{
	return ((MediaSelect *)((OmppData *)handle)->media[nmedia])->getMaxValue();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

OMPPCHOST_API char * __stdcall	omppSelectGetDesc(void *handle, int nmedia, int n)
{
	return ((MediaSelect *)((OmppData *)handle)->media[nmedia])->getDesc(n);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

OMPPCHOST_API int __stdcall		omppSelectGetValue(void *handle, int nmedia)
{
	return ((MediaSelect *)((OmppData *)handle)->media[nmedia])->getValue();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

OMPPCHOST_API int __stdcall		omppSelectSetValue(void *handle, int nmedia, int n)
{
	((MediaSelect *)((OmppData *)handle)->media[nmedia])->setValue(n);
	return (int)true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

OMPPCHOST_API void * __stdcall omppBitmapGetBits(void *handle, int nmedia)
{
	return (void *)((MediaBitmap *)((OmppData *)handle)->media[nmedia])->getPixels();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
