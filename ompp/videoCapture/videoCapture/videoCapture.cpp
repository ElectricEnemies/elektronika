/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<windows.h>
#include						<stdio.h>
#include						<string.h>
#include						"videoCapture.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

typedef unsigned __int32		dword;

/////////////////////////////////////////////////////////////////////////////////////////////////////

VideoCapture::VideoCapture(MediaHost *mhost) : MediaPlugin(mhost)
{
	memset(media, 0, sizeof(media));
	fps=10;
	ndevice=-1;
	vidcap=new Avidcap();
}

VideoCapture::~VideoCapture()
{
	stop();
	delete(vidcap);
}

bool VideoCapture::start()
{
	MediaBitmap *mb=(MediaBitmap *)media[outVIDEO];
	int			ndev=((MediaSelect *)media[inDEVICE])->getValue();
	if(vidcap->init(ndev, mb->getWidth(), mb->getHeight(), fps, 32))	// 32 bits bitmap buffer
	{
		ndevice=ndev;

		{
			MediaSelect *source=(MediaSelect *)media[inSOURCE];
			int			nb=vidcap->getAnalogSourceInfo();
			int			i;
			source->setMaxValue(nb);
			for(i=0; i<nb; i++)
			{
				char name [MPSTRINGSIZE];
				vidcap->getAnalogSourceInfo(i, name);
				source->setDesc(i, name);
			}
		}

		return vidcap->start();
	}
	ndevice=-1;
	return false;
}

void VideoCapture::stop()
{
	vidcap->stop();
	vidcap->release();
}

bool VideoCapture::process(double time, double beat)
{
	if(ndevice!=((MediaSelect *)media[inDEVICE])->getValue())
		start();
	if(vidcap->getAnalogSource()!=((MediaSelect *)media[inSOURCE])->getValue())
		vidcap->setAnalogSource(((MediaSelect *)media[inSOURCE])->getValue());

	vidcap->getBitmap((MediaBitmap *)media[outVIDEO], false);

	return true;
}

void VideoCapture::link(int pin, MediaBuffer *mb)
{
	media[pin]=mb;
	if(pin==inDEVICE)
		initDeviceList();
}


void VideoCapture::getError(char *error)
{
	strcpy(error, "no errors");
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void VideoCapture::initDeviceList()
{
	MediaSelect	*ms=(MediaSelect *)media[inDEVICE];
	int			i;
	vidcap->enumDevices();
	ms->setMaxValue(vidcap->nbdevices);
	for(i=0; i<vidcap->nbdevices; i++)
		ms->setDesc(i, vidcap->devices[i].name);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

VideoCaptureInfo::VideoCaptureInfo()
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////

VideoCaptureInfo::~VideoCaptureInfo()
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
	
bool VideoCaptureInfo::getName(char *name)
{
	strcpy(name, "videoCapture");
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////

MPqword VideoCaptureInfo::getGUID()
{
	return 0x5188456845636574;	// a static 64bits number as GUID
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
	
int VideoCaptureInfo::getGroup()
{
	return MPgroupEFFECT2D;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////

int	VideoCaptureInfo::getPriority()
{
	return MPpriorityIMPORT;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////

int VideoCaptureInfo::getMediaCount()
{
	return pinNB;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////

MediaInfo VideoCaptureInfo::getMediaInfo(int pin)
{
	MediaInfo	*mn=0;
	switch(pin)
	{
		case outVIDEO:
		return MediaInfo(MPmediaOUT|MPmediaBITMAP_XRGB, 0x63856512a5623487, "video out", "video output");

		case inDEVICE:
		return MediaInfo(MPmediaIN|MPmediaSELECT, 0x6546566666823487, "select device", "select device");

		case inSOURCE:
		return MediaInfo(MPmediaIN|MPmediaSELECT, 0x6548416510263487, "select source", "select source");
	}
	return MediaInfo();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
	
MediaPlugin * VideoCaptureInfo::getNewInstance(MediaHost *mhost)
{
	return (MediaPlugin *)new VideoCapture(mhost);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

extern "C" 
{
	__declspec(dllexport) int getMediaPluginVersion()
	{
		return MPVERSION;
	}

	__declspec(dllexport) class VideoCaptureInfo * getMediaPluginInfo()
	{
		return new VideoCaptureInfo();
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
