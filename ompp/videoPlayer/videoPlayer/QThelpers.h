#pragma once
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	QThelpers.H					(c)	YoY'05						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "tchar.h"
#include "stdio.h"
#include "windows.h"
#include "QTML.h"
#include "Movies.h"
#include "Quickdraw.h"
#include "QDOffscreen.h"
#include "string.h"
#include "FixMath.h"
#include <interface.h>
#include "ompp.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__inline Rect * GetPixBounds(PixMapHandle pixMap, Rect *bounds)
{
	*bounds = (**pixMap).bounds;
	return bounds;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AquickTime
{
public:
	char						filename[ALIB_PATH];
	MediaBitmap					*bitmap;

	// intern
	int							state;

	MovieController				thePlayer;
	Movie						theMovie;

	float						lstart;
	float						llength;
	float						mrate;
	float						mpos;
	bool						mplay;
	bool						msel;
	bool						mpalindrome;
	float						sens;

	enum
	{
								stateERROR,
								stateOK,
								state2INIT,
								state2REMOVE
	};

	void						init(MovieDrawingCompleteUPP myDrawCompleteProc);
	void						close();
	void						process();

	// extern

	int							playmode;
	float						loopstart;
	float						looplength;
	float						rate;
	float						pos;
	bool						play;
	bool						sel;
	bool						palindrome;
	bool						posfocus;

								AquickTime					(char *filename);
	virtual						~AquickTime					();


	void						frame						(Ptr bits, int row, Rect r);

	void						link						(MediaBitmap *bmp);

	char *						getFilename					() { return filename; }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							MAXQTMOVIE					(256)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AqtHost : public Athread
{
public:
	Asection					section;
	bool						brun;
	bool						bstop;
	MovieDrawingCompleteUPP		myDrawCompleteProc;
	AquickTime					*qt[MAXQTMOVIE];

								AqtHost						();
	virtual						~AqtHost					();

	virtual void				run							();

	AquickTime *				newQT						(char *filename);
	void						delQT						(AquickTime *qt);
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern AqtHost					qtHost;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
