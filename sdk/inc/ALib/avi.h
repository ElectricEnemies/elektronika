/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	AVI.H						(c)	YoY'03						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_AVI_H_
#define							_AVI_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<windows.h>
#include						<dshow.h>
#include						<uuids.h>		// ID Com Object
#include						<amstream.h>	// DirectShow multimedia stream interfaces
#include						<VFW.H>			// Video For Windows
#include						<ddraw.h>	    // DirectDrawEx interfaces
#include						"types.h"
#include						"file.h"
#include						"node.h"
#include						"bitmap.h"
#include						"interface.h"
#include						"buffer.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	If you use directly the variables in the class API, it's at your own risks. Prefer the methods...   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							guidAVIREAD						(AaviRead::CI.guid)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct
{
	sqword	start;
	dword	magic;
	dword	size;
	dword	type;
	sqword	next;
} Tchunk;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct {
    FOURCC		fccType;
    FOURCC		fccHandler;
    DWORD		dwFlags;	/* Contains AVITF_* flags */
    WORD		wPriority;
    WORD		wLanguage;
    DWORD		dwInitialFrames;
    DWORD		dwScale;	
    DWORD		dwRate;	/* dwRate / dwScale == samples/second */
    DWORD		dwStart;
    DWORD		dwLength; /* In units above... */
    DWORD		dwSuggestedBufferSize;
    DWORD		dwQuality;
    DWORD		dwSampleSize;
} myAVIStreamHeader;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void Conv4cc(char *s, dword v)
{
	s[0]=(char)(v);
	s[1]=(char)(v>>8);
	s[2]=(char)(v>>16);
	s[3]=(char)(v>>24);
	s[4]=0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AaviStream
{
public:
	myAVIStreamHeader			header;
	char						codec[5];
	char						name[1024];

	union
	{
		struct
		{
			HANDLE					hDecoder;	// * warning * all the union struct must have the same HANDLE / void * format as first args
			void					*format;
			int						fsize;
		}						generic;
		struct
		{
			HACMSTREAM				hAudsDecoder;
			WAVEFORMATEX			*wvi;
			int						fsize;
			WAVEFORMATEX			wvo;
			ACMSTREAMHEADER			ash;
			void					*audioCmp;
			dword					audioCmpSize;
			void					*audioPcm;
			dword					audioPcmSize;
			dword					audioPcmUsed;
		}						audio;
		struct
		{
			HIC						hVidsDecoder;
			BITMAPINFO				*bmi;
			int						fsize;
			BITMAPINFOHEADER		bmo;
			Abitmap					*bitmap;
			void					*bits;
		}						video;
	};
	
	
	void						*data;
	
								AaviStream();
								~AaviStream();
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! a class that manage AVI read operation
class AaviRead : public Anode
{
public:
	ALIBOBJ
	enum
	{
								VIDEO=1,
								AUDIO=2
	};

	ADLL						AaviRead						(char *filename, int type);
	ADLL						~AaviRead						();
								
	ADLL int					getWidth						();
	ADLL int					getHeight						();
	ADLL int					getNbBits						();
								
	ADLL Abitmap *				getFrame						(int n);
	ADLL int					getSample						(int n, void **buffer);
	ADLL int					setSample44ks					(int frame, void *buffer, int bufsize);

	ADLL float					getFPS							();

	bool						isOK;
	char						filename[ALIB_PATH];
	
	MainAVIHeader				avihead;
	
	AVIINDEXENTRY				*aie;
	int							nbaie;
	int							naie;
	int							aieOffset;
	
	bool						audioEachFrame;
	
	int							type;
	
	Afile						*file;
	void						*readBuffer;
	dword						readBufferSize;
	
	Tchunk						movi;
	AaviStream					stream[16];
	int							nstream;
	
	int							svideo;
	int							saudio;

	int							nbframes;
	int							frame;
	
	bool						force;
	
	char						*error;
private:

	bool						testIDX							(Afile *f, int test);
	void						checkIDX						(Afile *f);
	ADLL bool					goIDX							(int frame);
	ADLL bool					seek							(int frame);
	ADLL bool					open							();
	ADLL bool					initStreams						();
	ADLL bool					read							();
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! a class that manage AVI write operation
class AaviWrite : public Anode
{
public:
	ALIBOBJ
	enum
	{
								VIDEO=1,
								AUDIO=2
	};

	ADLL						AaviWrite						(char *filename, int width, int height, float fps, bool vdub=false);
	ADLL						~AaviWrite						();

	ADLL void					setBitmap						(Abitmap *b);
	ADLL void					setSample						(void *buffer, int bufsize);
	ADLL bool					writeFrame						();

	// private

	ADLL void					open							();
	ADLL void					close							();

	void						addIDX							(class Achunk *c, bool key);
								
	bool						vdub;
	bool						isOK;
	char						filename[ALIB_PATH];

	Afile						*file;
	class Achunk				*c_avi;
	class Achunk				*c_mov;

	sqword						o_avihead;
	MainAVIHeader				avihead;
	sqword						o_vidhead;
	myAVIStreamHeader			vidhead;
	sqword						o_audhead;
	myAVIStreamHeader			audhead;


	float						fps;
	Abitmap						*image;
	Abuffer						*audio;
	
	
	AVIINDEXENTRY				*aie;
	int							nbaie;
	int							maxaie;
	
	char						*error;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_AVI_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
