/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	FILE.H						(c)	YoY'99						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_FILE_H_
#define							_FILE_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<string.h>
#include						"types.h"
#include						"node.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	If you use directly the variables in the class API, it's at your own risks. Prefer the methods...   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							guidFILE						(Afile::CI.guid)

#define							ALIB_PATH					1024

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! a class that manage file acces (base interface)
class Afile : public Anode
{
public:
	ALIBOBJ

	enum
	{
								SEPARATOR	= '\\'
	};

	enum
	{
								syspathUSER=0,
								syspathNETWORK
	};

								Afile							(char *name)			: Anode(name)	{ offset=0; size=0; }
	virtual						~Afile							()						{ }

	virtual int					read							(void *p, int s)		{ offset+=s; return s; }
	virtual int					write							(void *p, int s)		{ offset+=s; size=maxi(size, offset); return s; }

	virtual bool				writeString						(char *s)				{ offset+=(int)strlen(s)+4; return true; }
	virtual bool				readString						(char *s)=0;
	virtual bool				readStringAlloc					(char **s)=0;

	virtual bool				seek							(sqword n)				{ offset=n; return true; }
	virtual sqword				getSize							()						{ return size; }

	virtual bool				isOK							()						{ return true; }

	ADLL virtual bool			relativePath					(char *relpath, char *path);	// relpath must have ALIB_PATH size
	ADLL virtual bool			absoluPath						(char *abspath, char *path);	// abspath must have ALIB_PATH size

	ADLL static bool			getSysPath						(int syspath, char *path);		// path must have at least a size of ALIB_PATH
	// private

	sqword						offset;
	sqword						size;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_FILE_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
