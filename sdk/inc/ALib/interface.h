/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INTERFACE.CPP				(c)	YoY'02						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_INTERFACE_H_
#define							_INTERFACE_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"types.h"
#include						"clipboard.h"
#include						"point.h"
#include						"rectangle.h"
#include						"node.h"
#include						"bitmap.h"
#include						"movie.h"
#include						"oglbitmap.h"
#include						"object.h"
#include						"window.h"
#include						"resources.h"
#include						"section.h"
#include						"font.h"
#include						"titlebar.h"
#include						"button.h"
#include						"display.h"
#include						"progress.h"
#include						"static.h"
#include						"edit.h"
#include						"treeview.h"
#include						"scrollbar.h"
#include						"toolbar.h"
#include						"selButton.h"
#include						"segment.h"
#include						"flash.h"
#include						"menu.h"
#include						"list.h" 
#include						"mlist.h"
#include						"thread.h"
#include						"msgbox.h"
#include						"filedlg.h"
#include						"file.h"
#include						"filehd.h"
#include						"filemem.h"
#include						"serial.h"
#include						"pipe.h"
#include						"buffer.h"
#include						"plugz.h"
#include						"tooltips.h"
#include						"d3d.h"
#include						"registry.h"
#include						"ftp.h"
#include						"selsize.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	If you use directly the variables in the class API, it's at your own risks. Prefer the methods...   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							ELEKTRONIKA

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL extern class Aresource		alibres;						// todo : make this as shared by all prg that use the DLL
ADLL extern class Aresource		resource;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum
{
								fontROUND08=0,
								fontROUND10,
								fontROUND12,
								fontROUND20,
								fontTERMINAL05,
								fontTERMINAL06,
								fontTERMINAL09,
								fontTERMINAL12,
								fontELEKTRO,
								fontSEGMENT06,
								fontSEGMENT10,
								fontSEGMENT20,
								fontCONFIDENTIAL14,
								fontCONFIDENTIAL16,
								fontCONFIDENTIAL20,
								fontCONFIDENTIAL24,
								fontCONFIDENTIAL36,
								fontARMY10,
								fontLEAVE10,
								fontTUBE10,
								alibMAXFONTS
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							alibMAXCOLORS					1

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Alib
{
public:
	float						mouseSensibility;
	dword						colors[alibMAXCOLORS];

	ADLL						Alib							();
	ADLL virtual				~Alib							();

	ADLL class Afont *			getFont							(int font);

private:
	class Afont					*font[alibMAXFONTS];
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// special midi over pipe

enum
{
	magicMIDIPACKET=0xf0f1f2f3,
	magicMIDISYSEX=0x0f1f2f3f,
	magicELEKOFF=0xfafbfcfd,
	magicELEKSHOW=0xa0a1a2a3
};

typedef struct
{
	byte		channel;
	byte		status;
	byte		p0;
	byte		p1;
} MidiPacket;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum
{
	contextALIB					= 10000,
	contextELEKTRO				= 20000,
	contextELEKTRONIKA			= 30000,
	contextAPP					= 40000,
	contextPLUG					= 50000
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL extern class Alib			alib;							// todo: alib system information

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void						initAlib						();
ADLL int						runAlib							();
ADLL void						Aexit							(int n);
ADLL void						freeAlib						();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool						exec							(char *cmd);
ADLL void						httpto							(char *url);
ADLL void						mailto							(char *email);
ADLL void						regsrv							(char *dllname, bool reg);
ADLL int						getCPUcount							();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL extern dword	 			mainThreadID;					// internal

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_INTERFACE_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
