/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	MENU.H						(c)	YoY'00						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_ITEM_H_
#define							_ITEM_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"types.h"
#include						"node.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	If you use directly the variables in the class API, it's at your own risks. Prefer the methods...   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							guidITEM						(Aitem::CI.guid)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//! a class that manage items-tree for Alist, Amenu and AtreeView
class Aitem : public Anode
{
public:

	enum
	{
		stateSELECTED			= Anode::stateLAST,
		stateCHECKED			= stateSELECTED<<1,
		stateFOLDER				= stateCHECKED<<1,
		stateDELLINK			= stateFOLDER<<1,
		stateLAST				= stateDELLINK<<1
	};

	ALIBOBJ

	ADLL						Aitem							(Aitem *i);

	ADLL						Aitem							(char *name);
	ADLL						Aitem							(char *name, Anode *father, Anode *l, int data=0);
	ADLL						Aitem							(char *name, Anode *father, int data, Anode *l=NULL);

	ADLL						Aitem							(char *name, char *help);
	ADLL						Aitem							(char *name, char *help, Anode *father, Anode *l, int data=0);
	ADLL						Aitem							(char *name, char *help, Anode *father, int data, Anode *l=NULL);

	ADLL virtual				~Aitem							();

	ADLL void					copyAll							(Aitem *e);

	Anode						*link;
	int							data;
	char						*help;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_ITEM_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
