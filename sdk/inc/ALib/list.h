/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	LIST.H						(c)	YoY'00						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_LIST_H_
#define							_LIST_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"types.h"
#include						"surface.h"
#include						"item.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	If you use directly the variables in the class API, it's at your own risks. Prefer the methods...   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							guidLIST						(Alist::CI.guid)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! a GUI list box
class Alist : public Asurface
{
	ALIBOBJ

	ADLL						Alist							(char *name, Aobject *L, int x, int y, int w, int h, Aitem *items);
	ADLL virtual				~Alist							();

	ADLL bool					setCurrentByData				(int data);
	ADLL bool					setCurrentByName				(char *name);
	ADLL bool					setCurrentByLink				(Anode *o);
	Anode *						getCurrentLink					()					{ return current?current->link:NULL; }
	int							getCurrentData					()					{ return current?current->data:-1; }
	Aitem *						getCurrent						()					{ return current; }
	ADLL bool					setCurrent						(Aitem *current);

	ADLL virtual bool			notify							(Anode *o, int event, dword p=0);
	ADLL virtual bool			mouse							(int x, int y, int state, int event);

	ADLL virtual void			NCdisplay						();


	class Aitem					*items;

private:

	class Afont					*font;
	class Aitem					*current;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_LIST_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
