/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	NODE.H						(c)	YoY'99						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_NODE_H_
#define							_NODE_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"types.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	If you use directly the variables in the class API, it's at your own risks. Prefer the methods...   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL extern char				*Alasterror;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef _DEBUG
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! debug node information
class AdbgNode
{
public:
	ADLL static class AdbgNode	*nodes;
	ADLL static int				nbnodes;
	
	ADLL						AdbgNode					(class Anode *n);
	ADLL virtual				~AdbgNode					();
								
	ADLL static void			add							(class Anode *n);
	ADLL static void			del							(class Anode *n);

	ADLL static void			check						();
								
	class Anode					*node;
	class AdbgNode				*next;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! object interface [not implemented // not used]
class Aproperties
{
public:
	qword						guid;
	int							offset;
	char						*name;
	char						*design;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! class information
class ACI
{
public:
	class ACI					*inherited;
	char						*name;
	qword						guid;
	int							nproperties;
	class Aproperties			*properties;
	class ACI					*next;

	ADLL 						ACI(char *name, qword guid, ACI *inherited, int np, class Aproperties *p);
	ADLL virtual				~ACI();
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL extern ACI					*aciList;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! base Alib object
class Anode
{
public:

	enum
	{
								stateTOP						= (1<<00),
								stateENABLE						= (1<<01),
								stateCOLLAPSED					= (1<<02),
								stateLAST						= (1<<03) 
	};

	enum
	{
		sortINC					=0,
		sortDEC					=1,
		sortRECURSIVE			=2
	};


	ADLL static ACI				CI;
	virtual ACI					*getCI							()						{ return &CI; }

	char						*name;

	Anode						*father;
	Anode						*next;
	Anode						*prev;
	Anode						*fchild;
	Anode						*lchild;

	dword						state;

	ADLL						Anode							(char *name=null, Anode *father=null);
	ADLL virtual				~Anode							();

	virtual bool				notify							(Anode *o, int event, dword p=0);
	ADLL void					asyncNotify						(Anode *o, int event, dword p=0);
	
	ADLL bool					is								(char *name);
	ADLL bool					isCI							(ACI *CI);
	ADLL bool					isGUID							(qword guid);
	
	ADLL void					setName							(char *name);

	ADLL void					clear							();		// delete all children
	ADLL int					count							();
	ADLL void					sort							(int flags=sortINC);

	void						setState						(int state, bool set);
	bool						getState						(int state);

	// private

	ADLL virtual void			add								(Anode *o);
	ADLL virtual void			del								(Anode *o);

	ADLL virtual Anode *		getChild						(ACI *ci);
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__inline bool Anode::getState(int state)
{
	return (this->state&state)==state;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__inline void Anode::setState(int state, bool set)
{
	if(set)
		this->state|=state;
	else
		this->state&=~state;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__inline bool Anode::notify(Anode *o, int event, dword p)
{
	if(father)
	{
		if(o==this)
			return father->notify(o, event, p);
		else
			return ((event&0xf000)==0xa000)?father->notify(o, event, p):false;
	}
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// notify

enum
{
								nyNOTHING						=0x0000,
								nyNOTIFY,

								nyCLICK							=0x0010,
								nyDBLCKICK,
								nyPRESS,
								nyCHECK,
								nyCHANGE,
								nySELECT,
								nyOK,
								nyCANCEL,
								nyRESET,
								nyCOMMAND,
								nyRELEASE,
								nyCLOSE,
								nyMINIMIZE,
								nyEXTEND,
								nySWITCH,
								
								nySUBSYS1						=0x0500,
								nySUBSYS2						=0x0600,
								nySUBSYS3						=0x0700,
								nySUBSYS4						=0x0800,
								nySUBSYS5						=0x0900,

								nyUSER1							=0x1000,
								nyUSER2							=0x2000,
								nyUSER3							=0x3000,
								nyUSER4							=0x4000,
								nyUSER5							=0x5000,
								nyUSER6							=0x6000,
								nyUSER7							=0x7000,
								nyUSER8							=0x8000,
								nyUSER9							=0x9000,

								nyTHRUMESSAGE					=0xA000,
								nySTATUS						=0xA500,	// send message to status bar 
								nyTOOLTIPS,									// send message to help bar or tooltips
								nyALERT,									// idem (just different level)
								nyWARNING,									// idem (just different level)
								nyERROR,									// idem (just different level)
								nyCONTEXT									// context menu
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_NODE_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
