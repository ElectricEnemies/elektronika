/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	REGISTRY.H					(c)	YoY'02						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_REGISTRY_H_
#define							_REGISTRY_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<windows.h>
#include						"types.h"
#include						"node.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	If you use directly the variables in the class API, it's at your own risks. Prefer the methods...   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							guidREGISTRY					(Aregistry::CI.guid)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! a class that manage registry DB operation
class Aregistry : public Anode
{
public:
	ALIBOBJ
	
	enum
	{
								CLASSES_ROOT,
								CURRENT_USER,
								LOCAL_MACHINE,
								USERS,
								CURRENT_CONFIG
	};


	ADLL						Aregistry						(char *name, int base=LOCAL_MACHINE);
	ADLL virtual				~Aregistry						();

	ADLL virtual bool			read							(char *name, char *s, int size);
	ADLL virtual bool			write							(char *name, char *s);

	ADLL virtual bool			read							(char *name, int *value);
	ADLL virtual bool			write							(char *name, int value);

	ADLL virtual bool			read							(char *name, bool *value);
	ADLL virtual bool			write							(char *name, bool value);
	
	ADLL virtual bool			subEnum							(int index, char *name, int size);

// private
	HKEY						hk;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_REGISTRY_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
