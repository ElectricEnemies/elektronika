/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	SERIAL.H					(c)	YoY'03						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_SERIAL_H_
#define							_SERIAL_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<stdio.h>
#include						"types.h"
#include						"file.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	If you use directly the variables in the class API, it's at your own risks. Prefer the methods...   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							guidSERIAL						(Aserial::CI.guid)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! a class that manage serial port access
class Aserial : public Afile
{
	ALIBOBJ
public:

	enum  	BaudRate 
	{
								Baud110							= CBR_110, 
								Baud300							= CBR_300, 
								Baud600							= CBR_600, 
								Baud1200						= CBR_1200,
								Baud2400						= CBR_2400, 
								Baud4800						= CBR_4800, 
								Baud9600						= CBR_9600, 
								Baud14400						= CBR_14400,
								Baud19200						= CBR_19200, 
								Baud38400						= CBR_38400, 
								Baud56000						= CBR_56000, 
								Baud57600						= CBR_57600,
								Baud115200						= CBR_115200, 
								Baud128000						= CBR_128000, 
								Baud256000						= CBR_256000
	};
 	
	enum  	DataBits 
	{ 
								Data5							= 5, 
								Data6							= 6, 
								Data7							= 7, 
								Data8							= 8 
	};

	enum  	Parity 
	{
								ParNone							= NOPARITY, 
								ParOdd							= ODDPARITY, 
								ParEven							= EVENPARITY, 
								ParMark							= MARKPARITY,
								ParSpace						= SPACEPARITY
	};

	enum  	StopBits 
	{ 
								Stop1							= ONESTOPBIT, 
								Stop1_5							= ONE5STOPBITS, 
								Stop2							= TWOSTOPBITS 
	};

	enum  	Handshake 
	{ 
								HandshakeOff, 
								HandshakeRtsCts, 
								HandshakeDtrDsr, 
								HandshakeSoftware 
	};


	ADLL						Aserial							(char *name);
	ADLL virtual				~Aserial						();

	ADLL bool					configure						(dword BaudRate, dword ByteSize, dword Parity, dword StopBits, bool rts=false, bool dtr=false);
	ADLL bool					timeouts						(dword ReadIntervalTimeout, dword ReadTotalTimeoutMultiplier, dword ReadTotalTimeoutConstant, dword WriteTotalTimeoutMultiplier, dword WriteTotalTimeoutConstant);

	ADLL virtual int			read							(void *p, int s);
	ADLL virtual int			write							(void *p, int s);

	ADLL virtual bool			writeString						(char *s);
	ADLL virtual bool			readString						(char *s);
	ADLL virtual bool			readStringAlloc					(char **s);
	
	ADLL virtual void			flush							();

	ADLL virtual bool			seek							(sqword n);
	ADLL virtual sqword			getSize							();

	ADLL virtual bool			isOK							();

	// private

	HANDLE						hComm;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_SERIAL_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
