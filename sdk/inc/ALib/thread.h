/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	THREAD.H					(c)	YoY'01						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_THREAD_H_
#define							_THREAD_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<windows.h>
#include						"object.h"
#include						"bitmap.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	If you use directly the variables in the class API, it's at your own risks. Prefer the methods...   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! a class that manage threading
class Athread
{
public:
	enum
	{
		priorityIDLE,
		priorityLOW,
		priorityNORMAL,
		priorityHIGH,
		prioritySPEED
	};
	
	enum
	{
		classSLOW,
		classNORMAL,
		classHIGH,
		classREALTIME
	};

	ADLL						Athread							();
	ADLL virtual				~Athread						();

	ADLL bool					start							();
	ADLL bool					stop							();
	ADLL bool					isRunning						();

	static ADLL void			sleep							(int millis);

	ADLL void					setPriority						(int level);
	ADLL int					getPriority						();

	ADLL void					setAffinity						(dword cpu);

	static ADLL void			setClass						(int level);
	static ADLL int				getClass						();



	static ADLL double			getCpuTime						();									// in millisecond

	static int					getTickCount					()	{ return GetTickCount(); }		// in millisecond

	static ADLL double			getTime							();									// in millisecond (precision CPU freq)
	
	static ADLL void			setCurrentThreadPriority		(int level);
	

	virtual void				run								()=0;

	// private

	HANDLE						hThread;
	DWORD						threadID;
	int							priority;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_SECTION_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
