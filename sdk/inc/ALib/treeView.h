/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	TREEVIEW.H					(c)	YoY'03						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_TREEVIEW_H_
#define							_TREEVIEW_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<string.h>
#include						"types.h"
#include						"node.h"
#include						"menu.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	If you use directly the variables in the class API, it's at your own risks. Prefer the methods...   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							guidTREEVIEW				(AtreeView::CI.guid)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							MAXTREEINFO					(128)
#define							MAXTREEICON					(128)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AtreeInfo
{
public:
	
	Arectangle					r;
	Aitem						*item;
	int							level;
	int							circ;
	
								AtreeInfo();
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__inline AtreeInfo::AtreeInfo()
{
	item=NULL;
	level=0;
	circ=0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! a class that dislay a TreeView
class AtreeView : public Aobject
{
public:
	ALIBOBJ
	
	enum
	{
								stateMULTISELECT				= Aobject::stateLAST,
								stateUSECOLORDATA				= stateMULTISELECT<<1,	// data represent the color
								stateUSEICONDATA				= stateUSECOLORDATA<<1,	// data represent the icon number
								stateLAST						= stateUSEICONDATA<<1
	};

	Abitmap						*branchs;

	class Aitem					*items;
	class Aitem					*current;

	class Afont					*font;

	class Abitmap				*icons[MAXTREEICON];

	int							xtree,ytree;
	int							xftree,yftree;
    int							xmtree,ymtree;
    bool						btree;

	dword						colorText;
	dword						colorFolder;
	dword						colorBackground;
	dword						colorSelect;
	dword						colorOver;


	class AtreeInfo				info[MAXTREEINFO];
	int							maxinfo;
	int							nbinfo;
	
	
	ADLL						AtreeView						(char *name, Aobject *father, int x, int y, int w, int h, Aitem *items);
	ADLL virtual				~AtreeView						();
	
	ADLL virtual bool			mouse							(int x, int y, int state, int event);
	ADLL void					paint							(Abitmap *b);
	ADLL virtual bool			size							(int w, int h);

	ADLL void					refresh							();
	Aitem *						getCurrent						()				{ return current; }
	ADLL void					setCurrent						(Aitem *i);

private:
	ADLL void					align							(Aitem *n);
	ADLL void					drawBranchs						(Abitmap *b, int x, int y, int n);
	ADLL void					deselect						(Aitem *n);
	ADLL void					collaps							(Aitem *n);
	
	ADLL void					calcInfo						();

	ADLL void					view							(Aitem *i);
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_TREEVIEW_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
