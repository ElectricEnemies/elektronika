#pragma warning( disable : 4996 )
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	TYPES.H						(c)	YoY'00						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_TYPES_H_
#define							_TYPES_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef unsigned __int64		qword;
typedef unsigned __int32		dword;
typedef unsigned __int16		word;
typedef unsigned char			byte;

typedef signed __int64			sqword;
typedef signed __int32			sdword;
typedef signed __int16			sword;
typedef signed char				sbyte;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							true							((bool)-1)
#define							false							((bool)0)
#define							null							(0)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef ADLL
	#ifdef WIN32
		#define					ADLL							__declspec(dllimport)
		#define					DLLIMPORT						__declspec(dllimport)
		#define					DLLEXPORT						__declspec(dllexport)
	#else
		#define					ADLL
		#define					DLLIMPORT
		#define					DLLEXPORT
	#endif
#endif

#define							countof(x)						(sizeof(x)/sizeof(x[0]))

#define							QWORD(a,b)						((((qword)(dword)a)<<32)|((qword)(dword)b))
#define							GUID(a,b)						QWORD(a,b)

#define							MAXTEXT							128
#define							MAXFILETEXT						1024

#define							ALIBOBJ\
	public:\
	ADLL static ACI				CI;\
	virtual ACI					*getCI							()						{ return &CI; }

#define							AOBJ\
	public:\
	static ACI					CI;\
	virtual ACI					*getCI							()						{ return &CI; }

#ifndef PI
#define							PI								3.14159265359
#endif

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef _mini_maxi_
#define _mini_maxi_

extern "C++"
{

__inline int					mini(int x, int y)				{ return x<y?x:y; }
__inline float					mini(float x, float y)			{ return x<y?x:y; }
__inline double					mini(double x, double y)		{ return x<y?x:y; }
__inline qword					mini(qword x, qword y)			{ return x<y?x:y; }
__inline sqword					mini(sqword x, sqword y)		{ return x<y?x:y; }

__inline int					maxi(int x, int y)				{ return x>y?x:y; }
__inline float					maxi(float x, float y)			{ return x>y?x:y; }
__inline double					maxi(double x, double y)		{ return x>y?x:y; }
__inline qword					maxi(qword x, qword y)			{ return x>y?x:y; }
__inline sqword					maxi(sqword x, sqword y)		{ return x>y?x:y; }

}

#endif

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//								GUID(0xAE57E515, n)				n

//---------- base

//								Anode							0x00000001
//								Aobject							0x00000002
//								Awindow							0x00000004
//								Asurface						0x00000005

//---------- graphic

//								Abitmap							0x00000100
//								Afont							0x00000110
//								Aflash							0x00000120
//								Amovie							0x00000130
//								AoglBitmap						0x00000140
//								AaviRead						0x00000150

//---------- resource

//								Aresource						0x00000200
//								Aresobj							0x00000210

//---------- multi-thread

//								Asection						0x00000300

//---------- file system

//								Afile							0x00000400
//								Afilemem						0x00000401
//								Afilehd							0x00000402
//								Apipe							0x00000403

//								Abuffer							0x00000410		// circular memory buffer

//								Aserial							0x00000420

//								AftpClient						0x00000430

//								Audp							0x00000440

//---------- registry

//								Aregistry						0x00000450

//---------- plugz system

//								Aplugz							0x00000500

//---------- user interface

//								AtitleBar						0x00001000
//								Abutton							0x00001010
//								Alist							0x00001030
//								Amenu							0x00001040
//								Atree							0x00001050
//								Adisplay						0x00001060
//								Astatic							0x00001070
//								Asegment						0x00001080
//								Aedit							0x00001090
//								Atooltips						0x00001100
//								AtreeView						0x00001110
//								AscrollBar						0x00001120
//								AtoolBar						0x00001130
//								AselButton						0x00001140
//								Aprogress						0x00001150
//								Amlist							0x00001160
//								Aselsize						0x00001170

// --------- system user interface

//								AfileDlg						0x00002000
//								Amsgbox							0x00002010

// --------- system 3D

//								Ad3d							0x00003000

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_TYPES_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
