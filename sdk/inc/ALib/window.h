/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	WINDOW.H					(c)	YoY'00						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_WINDOW_H_
#define							_WINDOW_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<windows.h>
#include						"surface.h"
#include						"section.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	If you use directly the variables in the class API, it's at your own risks. Prefer the methods...   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							guidWINDOW						(Awindow::CI.guid)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern ADLL Asection			safeGUI;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							MAXCUSTOMCURSORS				128

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//! GUI object, a main window
class Awindow : public Asurface
{
public:
	ADLL static ACI				CI;
	virtual ACI					*getCI							()						{ return &CI; }

	enum
	{
								stateNOSURFACESIZEUPDATE=Asurface::stateLAST,
								stateNOPAINT=stateNOSURFACESIZEUPDATE<<1,
								stateLAST=stateNOPAINT<<1
	};


	HWND						hwFather;
	HWND						hw;

	ADLL						Awindow							(char *name, int x, int y, int w, int h, bool useBlend=false);
	ADLL						Awindow							(char *name, HWND hwFather, int x, int y, int w, int h, bool useBlend=false);

	ADLL virtual				~Awindow						();

								// notifications ///////////////

	ADLL virtual void			repaint							(bool now=FALSE);
	ADLL virtual void			repaint							(Arectangle r, bool now=FALSE);

	virtual bool				notify							(Anode *o, int event, dword p=0)			{ return FALSE; }

								// commands ////////////////////

	ADLL static void			dropText						(char *text);
	ADLL static void			dropFiles						(char *files);

	ADLL virtual bool			show							(bool visible);
	ADLL virtual bool			zorder							(int action);
	ADLL virtual bool			move							(int x, int y);
	ADLL virtual bool			size							(int w, int h);
	ADLL virtual bool			mouseCapture					(bool b, Aobject *o=NULL);
	ADLL virtual bool			focus							(Aobject *o=NULL);
	ADLL bool					minimize						(bool min);
	ADLL bool					isMinimized						();

								// global //////////////////////

	// private /////////////////////

	ADLL virtual void			del								(Anode *o);

	ADLL virtual dword			NCnotify						(dword m, dword wp, dword lp);
	static int					NCmessageLoop					();
	static void					NCasyncNotify					(class asyncMessage *am);
	static void					NCclearAll						();

	ADLL static bool			NCcursor						(int cursor);
	ADLL static int				NCmakeCursor					(Aresobj *res, int hx, int hy);
	
	int							mouseX,mouseY,mouseW;
	int							mouseTime,mouseState;

	Aobject						*objectTrack;

	class Asection				updateSection;
	bool						inUpdate;

	Aobject						*keyboardFocusOBJ;
	Aobject						*mouseCaptureOBJ;

	HDC							hdc;		// 4 transparency
	HBITMAP						hbm;		// 4 transparency
	bool						useBlend;	// 4 transparency

	class Adroptarget			*droptarget;
	dword						dropType;
	
	static bool					NCsystem						(Aobject *o, int event, dword d0=0, dword d1=0);
	bool						NCdragEnter						(int x, int y, IDataObject *pDataObject, DWORD grfKeyState, DWORD *pdwEffect);
	bool						NCdragOver						(int x, int y, DWORD grfKeyState, DWORD *pdwEffect);
	bool						NCdragLeave						();
	bool						NCdrop							(int x, int y, IDataObject *pDataObject, DWORD grfKeyState, DWORD *pdwEffect);
	static void					NCshowOff						();
	
protected:

	ADLL virtual bool			NCmouse							(int x, int y, int state, int event);
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// private functions (internals)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool							NCglobalTimer					(Aobject *o, int time);
void							NCdestroy						(Aobject *o);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class asyncMessage
{
public:
	class Anode					*to;
	class Anode					*o;
	int							event;
	dword						p;

								asyncMessage(class Anode *to, class Anode *o, int event, dword p)
								{
									this->to=to;
									this->o=o;
									this->event=event;
									this->p=p;
								}
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Aidle
{
public:

	ADLL						Aidle							();
	ADLL virtual 				~Aidle							();
								
	virtual void				idlePulse						()=0;
	
	class Aidle					*nextIdle;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_WINDOW_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
