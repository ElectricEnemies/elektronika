/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	EFFECT.H					(c)	YoY'01						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_EFFECT_H_
#define							_EFFECT_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"elektrodef.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	If you use directly the variables in the class API, it's at your own risks. Prefer the methods...   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							guidEFFECT						(Aeffect::CI.guid)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							effectWIDTH						(512)
#define							BPMREF							(120.f)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum
{
								priorityMINIMUM	=0,

								priorityEXPORT	= 1024,
								priorityFILTER	= 1024 * 2,
								priorityIMPORT	= 1024 * 3,

								priorityMAXIMUM	= 1024 * 4
}; 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Aeffect : public Anode
{
public:
	friend class AeffectFront;
	friend class AeffectBack;
	friend class Atable;
	friend class Aonoff;
	friend class Acapsule;
	friend class Amonitor;
	
	ELIBOBJ

	EDLL						Aeffect							(QIID qiid, char *name, class AeffectInfo *info, class Acapsule *capsule);
	EDLL virtual				~Aeffect						();

	virtual void				actionStart						(double time)									{ }
	virtual void				action							(double time, double dtime, double beat, double dbeat)=0;
	virtual void				actionStop						()												{ }

	virtual void				settings						(bool emergency)							{ }

	virtual bool				save							(Afile *f)						{ return TRUE; }
	virtual bool				load							(Afile *f)						{ return TRUE; }

	virtual bool				savePreset						(Afile *f)						{ return TRUE; }
	virtual bool				loadPreset						(Afile *f)						{ return TRUE; }
	
	virtual bool				midiSysex						(Abuffer *b, dword time)		{ return TRUE; }

	virtual int					priority						()=0;
	EDLL virtual float			getStreamQuality				(class Apin *pin);	// return stream buffer quality (0: good  +:too much buffer  -:need more buffer)


	EDLL static Aeffect *		getEffect						(Aobject *o);
	
	qword						getQIID							()								{ return qiid; }
	
	EDLL int					getVideoWidth					();
	EDLL int					getVideoHeight					();
	EDLL bool					getTableIsRunning				();
	EDLL double					getTime							();
	EDLL double					getBeat							();
	EDLL int					getFrameRate					();
	EDLL int					getLoopTime						();

	EDLL Aobject *				getFrontLayer					();
	EDLL Aobject *				getBackLayer					();
	EDLL Atable *				getTable						();
	EDLL char *					getRootPath						();
	
	EDLL int					addPresetFile					(char *file);			// file access for preset
	EDLL bool					getPresetFile					(int n, char *file);	// file access for preset

	bool						NCoscMessage					(class AoscMessage *reply, class AoscMessage *msg, char *path);
	EDLL virtual bool			oscMessage						(class AoscMessage *reply, class AoscMessage *msg, class AoscNode *onode, int action);

	class Acapsule				*capsule;
	class AeffectFront			*front;
	class AeffectBack			*back;
	class AeffectInfo			*info;

// private
private:

	qword						qiid;
	int							instantPriority;
	int							instantOrder;
	bool						onoff;
	bool						monoff;
	bool						selected;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AeffectFront : public Aobject
{
public:
	ELIBOBJ

	EDLL						AeffectFront					(QIID qiid, char *name, class Aeffect *t, int h);
	EDLL virtual				~AeffectFront					();

	EDLL virtual bool			notify							(Anode *o, int event, dword p);
	EDLL virtual bool			mouse							(int x, int y, int state, int event);

	Aeffect						*effect;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AeffectBack : public Aobject
{
public:
	ELIBOBJ

	EDLL						AeffectBack						(QIID qiid, char *name, class Aeffect *t, int h);
	EDLL virtual				~AeffectBack					();

	EDLL virtual bool			notify							(Anode *o, int event, dword p);
	EDLL virtual bool			mouse							(int x, int y, int state, int event);

	Aeffect						*effect;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AeffectInfo : public Aplugz
{
public:
	ELIBOBJ

enum	// effect class
{
	GENERIC,
	INOUT,
	MIXER,
	PLAYER,
	EFFECT2D,
	EFFECT3D,
	EFFECTAUDIO,
	RENDER,
	MAXIMUM
};

								AeffectInfo						(char *name, ACI *eci, char *ename, char *ehelp);
								AeffectInfo						(char *name, qword guid, char *ename, char *ehelp);

	EDLL virtual Aeffect *		create							(QIID qiid, char *name, Acapsule *capsule)=0;

	virtual int					getEffectClass					() { return GENERIC; }
	virtual dword				version							()=0;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__inline AeffectInfo::AeffectInfo(char *name, qword guid, char *ename, char *ehelp) : Aplugz(name, guid, ename, ehelp)
{
}

__inline AeffectInfo::AeffectInfo(char *name, ACI *eci, char *ename, char *ehelp) : Aplugz(name, eci->guid, ename, ehelp)
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL extern char				*efClassName[AeffectInfo::MAXIMUM];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AoscNode : public Anode
{
public:
	ELIBOBJ

	char						*format;
	char						*help;

	EDLL						AoscNode						(char *name, Anode *container, char *format, char *help);
	EDLL virtual				~AoscNode						();
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_EFFECT_H
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
