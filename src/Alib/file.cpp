/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"export.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	FILE.CPP					(c)	YoY'99						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<shlobj.h>
#include						"file.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL ACI						Afile::CI=ACI("Afile", GUID(0xAE57E515,0x00000400), &Anode::CI, 0, NULL); // countof(properties), properties);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Afile::getSysPath(int syspath, char *path)
{
	switch(syspath)
	{
		case syspathUSER:
		return SHGetFolderPath(NULL, CSIDL_PERSONAL, NULL, 0, path)==S_OK;
		break;

		case syspathNETWORK:
		return SHGetFolderPath(NULL, CSIDL_NETHOOD, NULL, 0, path)==S_OK;
		break;
	}
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Afile::relativePath(char *relpath, char *path)
{
	char	*root=name;
	char	root_drive[ALIB_PATH];
	char	root_dir[ALIB_PATH];
	char	root_file[ALIB_PATH];
	char	root_ext[ALIB_PATH];
	char	path_drive[ALIB_PATH];
	char	path_dir[ALIB_PATH];
	char	path_file[ALIB_PATH];
	char	path_ext[ALIB_PATH];
	strlwr(root);
	strlwr(path);
	_splitpath(root, root_drive, root_dir, root_file, root_ext);
	_splitpath(path, path_drive, path_dir, path_file, path_ext);
	if(!strncmp(path_dir, root_dir, strlen(root_dir)))
	{
		char	*rpath=path_dir+strlen(root_dir);
		strcpy(relpath, rpath);
		strcat(relpath, path_file);
		strcat(relpath, path_ext);
		return true;
	}
	strcpy(relpath, path);
	return FALSE;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Afile::absoluPath(char *abspath, char *path)
{
	char	*root=name;
	char	root_drive[ALIB_PATH];
	char	root_dir[ALIB_PATH];
	char	root_file[ALIB_PATH];
	char	root_ext[ALIB_PATH];
	char	path_drive[ALIB_PATH];
	char	path_dir[ALIB_PATH];
	char	path_file[ALIB_PATH];
	char	path_ext[ALIB_PATH];
	strlwr(root);
	strlwr(path);
	_splitpath(root, root_drive, root_dir, root_file, root_ext);
	_splitpath(path, path_drive, path_dir, path_file, path_ext);
	if(path_drive[0])
		strcpy(abspath, path);
	else
	{
		strcpy(abspath, root_drive);
		strcat(abspath, root_dir);
		strcat(abspath, path);
		return true;
	}

	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
