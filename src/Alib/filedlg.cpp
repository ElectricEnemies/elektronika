/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"export.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	FILEDLG.CPP					(c)	YoY'01						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<stdio.h>
#include						<shlobj.h>
#include						"filedlg.h"
#include						"window.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL ACI						AfileDlg::CI=ACI("AfileDlg", GUID(0xAE57E515,0x00002000), &Anode::CI, 0, NULL); // countof(properties), properties);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL AfileDlg::AfileDlg(char *name, Aobject *onotify, char *sel, char *file, int type) : Anode(name, NULL)
{
	toNotify=onotify;
	select=sel?strdup(sel):NULL;
	memset(filename, 0, sizeof(filename));
	if(file)
		strcpy(filename, file);
	if(type==LOAD)
	{
		OPENFILENAME	ofn;
		ofn.lStructSize=sizeof(ofn);
		ofn.hwndOwner=onotify->getWindow()->hw;
		ofn.hInstance=GetModuleHandle(NULL);
		ofn.lpstrFilter=sel;
		ofn.lpstrCustomFilter=NULL;
		ofn.nMaxCustFilter=0;
		ofn.nFilterIndex=1;
		ofn.lpstrFile=filename;
		ofn.nMaxFile=256;
		ofn.lpstrFileTitle=NULL;
		ofn.nMaxFileTitle=0;
		ofn.lpstrInitialDir=NULL;
		ofn.lpstrTitle="open file";
		ofn.Flags=OFN_FILEMUSTEXIST;
		ofn.lpstrDefExt=sel;
		ok=GetOpenFileName(&ofn)?TRUE:FALSE;
	}
	else if(type==SAVE)
	{
		OPENFILENAME	ofn;
		ofn.lStructSize=sizeof(ofn);
		ofn.hwndOwner=onotify->getWindow()->hw;
		ofn.hInstance=GetModuleHandle(NULL);
		ofn.lpstrFilter=sel;
		ofn.lpstrCustomFilter=NULL;
		ofn.nMaxCustFilter=0;
		ofn.nFilterIndex=1;
		ofn.lpstrFile=filename;
		ofn.nMaxFile=256;
		ofn.lpstrFileTitle=NULL;
		ofn.nMaxFileTitle=0;
		ofn.lpstrInitialDir=NULL;
		ofn.lpstrTitle="save file";
		ofn.Flags=OFN_PATHMUSTEXIST;
		ofn.lpstrDefExt=sel;
		ok=GetSaveFileName(&ofn)?TRUE:FALSE;
	}
	else if(type==COMPUTER)
	{
		BROWSEINFO		bi;
		LPITEMIDLIST	il;
		bi.hwndOwner=onotify->getWindow()->hw;
		bi.pidlRoot=NULL;
		bi.pszDisplayName=filename;
		bi.lpszTitle="select a computer";
		bi.ulFlags=BIF_BROWSEFORCOMPUTER;
		bi.lpfn=NULL;
		bi.lParam=0;
		bi.iImage=0;
		il=SHBrowseForFolder(&bi);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL AfileDlg::~AfileDlg()
{
	if(select)
		free(select);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool AfileDlg::getFile(char *filename)
{
	if(ok)
	{
		strcpy(filename, this->filename);
		return TRUE;
	}
	return FALSE;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
