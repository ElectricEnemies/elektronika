/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"export.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	FILEHD.CPP					(c)	YoY'99						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<windows.h>
#include						"filehd.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL ACI						Afilehd::CI=ACI("Afilehd", GUID(0xAE57E515,0x00000402), &Afile::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Afilehd::exist(char *filename)
{
	return (GetFileAttributes(filename)!=INVALID_FILE_ATTRIBUTES);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL Afilehd::Afilehd(char *name, int type) : Afile(name)
{
	hf=INVALID_HANDLE_VALUE;

	switch(type)
	{
		case READ:
		hf=CreateFile(name, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_FLAG_RANDOM_ACCESS, NULL);
		break;

		case WRITE:
		hf=CreateFile(name, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_FLAG_RANDOM_ACCESS, NULL);
		break;

		case READ|WRITE:
		break;
	}
	offset=0;
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL Afilehd::~Afilehd()
{
	if(hf!=INVALID_HANDLE_VALUE)
		CloseHandle(hf);
	hf=INVALID_HANDLE_VALUE;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL int Afilehd::read(void *p, int s)
{
	DWORD	n=0;
	if(ReadFile(hf, p, s, &n, NULL))
	{
		offset+=n;
		return (int)n;
	}
	return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL int Afilehd::write(void *p, int s)
{
	DWORD	n=0;
	if(WriteFile(hf, p, s, &n, NULL))
	{
		offset+=n;
		return n;
	}
	return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Afilehd::seek(sqword n)
{
	LONG	high=(LONG)(n>>32);
	if(SetFilePointer(hf, (LONG)(n&0xffffffff), &high, FILE_BEGIN))
	{
		offset=n;
		return true;
	}
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL sqword Afilehd::getSize()
{
	LARGE_INTEGER	s;
	if(GetFileSizeEx(hf, &s))
		return s.QuadPart;
	return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Afilehd::readStringAlloc(char **s)
{
	int	len;
	if(read(&len, sizeof(len))!=sizeof(len))
		return false;
	*s=(char *)malloc(len+1);
	if(read(*s, len)!=len)
		return false;
	(*s)[len]=0;
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Afilehd::readString(char *s)
{
	int	len;
	if(read(&len, sizeof(len))!=sizeof(len))
		return false;
	if(read(s, len)!=len)
		return false;
	s[len]=0;
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Afilehd::writeString(char *s)
{
	int	len=strlen(s);
	if(!write(&len, sizeof(len)))
		return false;
	if(!write(s, len))
		return false;
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
