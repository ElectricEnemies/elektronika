/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"export.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INTERFACE.CPP				(c)	YoY'99						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include						"interface.h"
#include						"font.h"
#include						"resources.h"
#include						"resource.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL HINSTANCE					alibInstance=GetModuleHandle("alib100");
ADLL Aresource					alibres;
ADLL Aresource					resource;

//ADLL HINSTANCE					alibInstance=GetModuleHandle("alib100");
//ADLL Aresource					alibres=Aresource("alib resource", alibInstance);
//ADLL Aresource					resource=Aresource("main resource");

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Atakslist
{
public:
	class Atakslist				*next;
	int							time;
	int							inc;
	Aobject						*o;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL Alib::Alib()
{
	mouseSensibility=0.01f;
	memset(font, 0, sizeof(font));
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL Alib::~Alib()
{
	int	i;
	for(i=0; i<alibMAXFONTS; i++)
		if(font[i])
			delete(font[i]);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL Afont * Alib::getFont(int n)
{
	if(font[n])
		return font[n];
	switch(n)
	{
		case fontELEKTRO:
		return font[n]=new Afont("font01", &alibres.get(MAKEINTRESOURCE(PNG_FONT001), "PNG"), 16, 16, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@£$&È\"#'()-+*/=%,;:!?. <>Ë_Á‚ÍÓÙ˚‰ÎÔˆ¸^® [\\]{|}~ ");

		case fontROUND08:
		return font[n]=new Afont("arial rounded 08", &alibres.get(MAKEINTRESOURCE(PNG_FONTROUND08), "PNG"));

		case fontROUND10:
		return font[n]=new Afont("arial rounded 10", &alibres.get(MAKEINTRESOURCE(PNG_FONTROUND10), "PNG"));

		case fontROUND12:
		return font[n]=new Afont("arial rounded 12", &alibres.get(MAKEINTRESOURCE(PNG_FONTROUND12), "PNG"));

		case fontROUND20:
		return font[n]=new Afont("arial rounded 20", &alibres.get(MAKEINTRESOURCE(PNG_FONTROUND20), "PNG"));

		case fontTERMINAL05:
		return font[n]=new Afont("terminal 05", &alibres.get(MAKEINTRESOURCE(PNG_FONTTERMINAL05), "PNG"));

		case fontTERMINAL06:
		return font[n]=new Afont("terminal 06", &alibres.get(MAKEINTRESOURCE(PNG_FONTTERMINAL06), "PNG"));

		case fontTERMINAL09:
		return font[n]=new Afont("terminal 09", &alibres.get(MAKEINTRESOURCE(PNG_FONTTERMINAL09), "PNG"));

		case fontTERMINAL12:
		return font[n]=new Afont("terminal 12", &alibres.get(MAKEINTRESOURCE(PNG_FONTTERMINAL12), "PNG"));

		case fontSEGMENT06:
		return font[n]=new Afont("segment 06", &alibres.get(MAKEINTRESOURCE(PNG_FONTSEGMENT06), "PNG"), 6, 9, "0123456789.:");

		case fontSEGMENT10:
		return font[n]=new Afont("segment 10", &alibres.get(MAKEINTRESOURCE(PNG_FONTSEGMENT10), "PNG"), 10, 14, "0123456789.");

		case fontSEGMENT20:
		return font[n]=new Afont("segment 20", &alibres.get(MAKEINTRESOURCE(PNG_FONTSEGMENT20), "PNG"), 20, 28, "0123456789.");

		case fontCONFIDENTIAL14:
		return font[n]=new Afont("confidential 14", &alibres.get(MAKEINTRESOURCE(PNG_FONTCONF14), "PNG"), 2, 0);

		case fontCONFIDENTIAL16:
		return font[n]=new Afont("confidential 16", &alibres.get(MAKEINTRESOURCE(PNG_FONTCONF16), "PNG"), 2, 0);

		case fontCONFIDENTIAL20:
		return font[n]=new Afont("confidential 20", &alibres.get(MAKEINTRESOURCE(PNG_FONTCONF20), "PNG"), 2, 0);

		case fontCONFIDENTIAL24:
		return font[n]=new Afont("confidential 24", &alibres.get(MAKEINTRESOURCE(PNG_FONTCONF24), "PNG"), 2, 0);

		case fontCONFIDENTIAL36:
		return font[n]=new Afont("confidential 36", &alibres.get(MAKEINTRESOURCE(PNG_FONTCONF36), "PNG"), 2, 0);

		case fontARMY10:
		return font[n]=new Afont("army 10", &alibres.get(MAKEINTRESOURCE(PNG_FONT_ARMY), "PNG"));

		case fontLEAVE10:
		return font[n]=new Afont("leave 10", &alibres.get(MAKEINTRESOURCE(PNG_FONT_LEAVE), "PNG"));

		case fontTUBE10:
		return font[n]=new Afont("tube 10", &alibres.get(MAKEINTRESOURCE(PNG_FONT_TUBES), "PNG"));
	}
	return NULL;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL class Alib					alib;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern bool						messageLoopRUN;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

dword							mainThreadID=0;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void Aexit(int n)
{
#ifdef _DEBUG
//	messageLoopRUN=FALSE;
	Awindow::NCshowOff();
	PostQuitMessage(n);
#else
  HANDLE hHandle;
  //DWORD dwExitCode = 0;
  hHandle = ::OpenProcess(PROCESS_ALL_ACCESS,0,GetCurrentProcessId());
  //::GetExitCodeProcess(hHandle,&dwExitCode);
  ::TerminateProcess(hHandle,0);
#endif
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void initAlib()
{
	mainThreadID=GetCurrentThreadId();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL int runAlib()
{
	return Awindow::NCmessageLoop();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void destroyList();

ADLL void freeAlib()
{
	destroyList();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL BOOL WINAPI DllMain(HINSTANCE hinst, DWORD m, void *p)
{
	switch(m)
	{
		case DLL_PROCESS_ATTACH:
			alibInstance=hinst;
			alibres=Aresource("alib resource", alibInstance);
			//resource=Aresource("main resource");
		break;

		case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <windows.h>
#include <process.h>

ADLL void mailto(char *email)
{
	long	Size=511;
	HKEY	hkDefault;
	HKEY	hk;
	char	mailprg[512];
	char	command[512];
	char	action[512];
	if(RegOpenKey(HKEY_LOCAL_MACHINE, "SOFTWARE\\Clients\\Mail", &hkDefault)==ERROR_SUCCESS)
	{
		if(RegQueryValue(hkDefault, NULL, mailprg, &Size)==ERROR_SUCCESS)
		{
			strcat(mailprg, "\\Protocols\\Mailto\\Shell\\Open\\Command");
			if(RegOpenKey(hkDefault, mailprg, &hk)==ERROR_SUCCESS)
			{
				bool	b=TRUE;
				while(b)
				{
					switch(RegQueryValue(hk, NULL, command, &Size))
					{
						case ERROR_MORE_DATA:
						break;

						case ERROR_SUCCESS:
						{
							char *p=strstr(command, "%");
							if(p)
							{
								PROCESS_INFORMATION	pi;
								STARTUPINFO			si;
								memset(&si, 0, sizeof(si));
								si.cb=sizeof(si);
								strcpy(action, command);
								strcpy(action+(p-command), "mailto:");
								strcat(action, email);
								strcat(action, p+2);
								CreateProcess(NULL, action, NULL, NULL, FALSE, CREATE_DEFAULT_ERROR_MODE, NULL, NULL, &si, &pi);
							}
						}

						default:
						b=FALSE;
						break;
					}
				}
				RegCloseKey(hk);
			}
		}
		RegCloseKey(hkDefault);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void httpto(char *url)
{
	long	Size=511;
	HKEY	hk;
	char	command[512];
	char	action[512];
	if(RegOpenKey(HKEY_CLASSES_ROOT, "file\\shell\\open\\command", &hk)==ERROR_SUCCESS)
	{
		bool	b=TRUE;
		while(b)
		{
			switch(RegQueryValue(hk, NULL, command, &Size))
			{
				case ERROR_MORE_DATA:
				break;

				case ERROR_SUCCESS:
				{
					char *p=strstr(command, "%");
					if(p)
					{
						PROCESS_INFORMATION	pi;
						STARTUPINFO			si;
						memset(&si, 0, sizeof(si));
						si.cb=sizeof(si);
						strcpy(action, command);
						strcpy(action+(p-command), url);
						strcat(action, p+2);
						CreateProcess(NULL, action, NULL, NULL, FALSE, CREATE_DEFAULT_ERROR_MODE, NULL, NULL, &si, &pi);
					}
				}

				default:
				b=FALSE;
				break;
			}
		}
		RegCloseKey(hk);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool exec(char *cmd)
{
	bool	b=false;
	PROCESS_INFORMATION	pi;
	STARTUPINFO			si;
	memset(&si, 0, sizeof(si));
	si.cb=sizeof(si);
	b=CreateProcess(NULL, cmd, NULL, NULL, FALSE, CREATE_DEFAULT_ERROR_MODE, NULL, NULL, &si, &pi)?true:false;
	if(pi.hProcess)
		CloseHandle(pi.hProcess);
	if(pi.hThread)
		CloseHandle(pi.hThread);
	return b;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void regsrv(char *dllname, bool reg)
{
	HINSTANCE	hLib=LoadLibrary(dllname);
	FARPROC		lpDllEntryPoint;

	if(hLib<(HINSTANCE)HINSTANCE_ERROR)
		return;

	if(reg)
		lpDllEntryPoint=GetProcAddress(hLib, "DllRegisterServer");
	else
		lpDllEntryPoint=GetProcAddress(hLib, "DllUnregisterServer");
	
	if(lpDllEntryPoint!=NULL)
		(*lpDllEntryPoint)();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL int getCPUcount()
{
	SYSTEM_INFO SysInfo;
	int			nProcessors = 0;
	ZeroMemory (&SysInfo, sizeof (SYSTEM_INFO));
	GetSystemInfo(&SysInfo);
	return SysInfo.dwNumberOfProcessors;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
