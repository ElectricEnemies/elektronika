/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"export.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	SCROLLBAR.CPP				(c)	YoY'04						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<stdio.h>
#include						"scrollbar.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL ACI						AscrollBar::CI=ACI("AscrollBar", GUID(0xAE57E515,0x00001120), &Aobject::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL AscrollBar::AscrollBar(char *name, Aobject *L, int x, int y, int w, int h, int type) : Aobject(name, L, x, y, w, h)
{
	colorBACK=0xff404040;
	colorFORE=0xffa0a0a0;
	colorBORDER=0xffffffff;
	this->type=type;
	ipos=0.f;
	view=1.f;
	m_test=false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL AscrollBar::~AscrollBar()
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void AscrollBar::paint(Abitmap *bitmap)
{
	bitmap->boxfa(0, 0, pos.w-1, pos.h-1, colorBACK);
	switch(type)
	{
		case HORIZONTAL:
		{
			int	x=min((int)(ipos*(float)pos.w), pos.w-1);
			int	w=max((int)(view*(float)pos.w), 1);
			int	x2=min(x+w, pos.w-1);
			bitmap->boxfa(x, 0, x2, pos.h-1, colorFORE);
			bitmap->boxa(x, 0, x2, pos.h-1, colorBORDER);
		}
		break;
		
		case VERTICAL:
		{
			int	y=min((int)(ipos*(float)pos.h), pos.h-1);
			int	h=max((int)(view*(float)pos.h), 1);
			int	y2=min(y+h, pos.h-1);
			bitmap->boxfa(0, y, pos.w-1, y2, colorFORE);
			bitmap->boxa(0, y, pos.w-1, y2, colorBORDER);
		}
		break;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool AscrollBar::mouse(int x, int y, int state, int event)
{
	switch(event)
	{
		case mouseNORMAL:
		cursor(cursorHANDSEL);
		if(m_test)
			calcMouse(x, y);
		return true;

		case mouseLDOWN:
		cursor(cursorHANDSEL);
		mouseCapture(true);
		m_test=true;
		calcMouse(x, y);
		return TRUE;

		case mouseENTER:
		cursor(cursorHANDSEL);
		return TRUE;

		case mouseLUP:
		cursor(cursorHANDSEL);
		calcMouse(x, y);
		case mouseLEAVE:
		m_test=false;
		mouseCapture(false);
		return TRUE;
	}
	return FALSE;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void AscrollBar::calcMouse(int x, int y)
{
	switch(type)
	{
		case HORIZONTAL:
		x-=(int)((view*(float)pos.w)*0.5f);
		ipos=(float)x/(float)pos.w;
		break;
		
		case VERTICAL:
		y-=(int)((view*(float)pos.h)*0.5f);
		ipos=(float)y/(float)pos.h;
		break;
	}
	ipos=max(min(1.f-view, ipos), 0.f);
	father->notify(this, nyCHANGE);
	repaint();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void AscrollBar::setPosition(float pos)
{
	ipos=max(min(pos, 1.f-view), 0.f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void AscrollBar::setView(float view)
{
	view=max(min(view, 1.f), 0.0001f);
	this->view=view;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
