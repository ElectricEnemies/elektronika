/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"export.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	SECTION.CPP					(c)	YoY'99						WEB: search aestesis
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"section.h"
#include						"thread.h"
#include						<stdio.h>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void dbgThreadLog(char *oldinfo, char *newfile, int line)
{
	char cpath[1024];
	{
		memset(cpath, 0, sizeof(cpath));
		GetModuleFileName(GetModuleHandle(null), cpath, sizeof(cpath));
		if(cpath[0])
		{
			char	*s=strrchr(cpath, '\\');
			if(s)
				*s=0;
		}
	}
	char filename[1025];
	sprintf(filename, "%s\\log.txt", cpath);
	{
		FILE *f=fopen(filename, "a");
		if(f)
		{
			fprintf(f, "\r\nError: (Asection) locked by '%s' wanted by '%s line:%d'\r\n", oldinfo, newfile, line);
			fclose(f);
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL Asection::Asection()
{
	InitializeCriticalSection(&cs);
	memset(dbginfo, 0, sizeof(dbginfo));
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL Asection::~Asection()
{
	DeleteCriticalSection(&cs);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Asection::enter(char *dbgfile, int dbgline, bool block)
{
	if(block)
	{
		int time=(int)Athread::getTickCount();
		while(Athread::getTickCount()-time<1000)
		{
			bool b=TryEnterCriticalSection(&cs)?true:false;
			if(b)
			{
				sprintf(dbginfo, "%s line:%d", dbgfile, dbgline);
				return true;
			}
			Athread::sleep(5);
		}
		dbgThreadLog(dbginfo, dbgfile, dbgline);
		EnterCriticalSection(&cs);
	}
	else
	{
		bool b=TryEnterCriticalSection(&cs)?true:false;
		if(b)
			sprintf(dbginfo, "%s line:%d", dbgfile, dbgline);
		return b;
	}
	sprintf(dbginfo, "%s line:%d", dbgfile, dbgline);
	return TRUE;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void Asection::leave()
{
	memset(dbginfo, 0, sizeof(dbginfo));
	LeaveCriticalSection(&cs);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
