/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"export.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	SEGMENT.CPP					(c)	YoY'01						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<stdio.h>
#include						"segment.h"
#include						"font.h"
#include						"interface.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL ACI						Asegment::CI		= ACI("Asegment",	GUID(0xAE57E515,0x00001080), &Aobject::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL Asegment::Asegment(char *name, Aobject *f, int x, int y, int digits, int min, int max, Afont *font, dword color, float sensibility, int decimal) : Aobject(name, f, x, y, 4, 4)
{
	ox=oy=0;
	this->color=color;
	this->sensibility=sensibility;
	this->font=font;
	test=false;
	value=0;
//	sens=0;
	this->digits=digits;
	this->min=min;
	this->max=max;
	this->decimal=decimal;
	size(font->w*(digits+(decimal?1:0)), font->h);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL Asegment::~Asegment()
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void Asegment::paint(Abitmap *b)
{
	char	s[128];
	int		i;
	int		p=digits-1+(decimal?1:0);
	int		v=value;
	s[digits]=0;
	for(i=0; i<digits; i++)
	{
		if(decimal&&(i==decimal))
			s[p--]='.';
		s[p--]=(v%10)+'0';
		v/=10;
	}
	font->set(b, 0, 0, s, color);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Asegment::mouse(int x, int y, int state, int event)
{
	switch(event)
	{
		case mouseLDOWN:
		mouseCapture(true);
		test=true;
		oy=y;
		ox=x;
		fvalue=((float)value/(float)max);
		cursor(cursorHANDSEL);
		return true;

		case mouseNORMAL:
		cursor(cursorHANDSEL);
		if(test)
		{
			int		v=value;
			int		dx=(x-ox);
			int		dy=(y-oy);
			if(abs(dx)>=abs(dy))
				dy=0;
			else
				dx=0;
			fvalue-=alib.mouseSensibility*sensibility*(float)dy;
			fvalue+=alib.mouseSensibility*sensibility*0.05f*((float)dx);
			value=maxi(mini((int)(fvalue*max), max), min);
			if(v!=value)
			{
				father->notify(this, nyCHANGE, value);
				repaint();
			}
			oy=y;
			ox=x;
		}
		return true;

		case mouseLUP:
		case mouseLOSTCAPTURE:
		mouseCapture(false);
		test=false;
		return true;
	}
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL int Asegment::get()
{
	return value;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void Asegment::set(int value)
{
	this->value=maxi(mini(value, max), min);
	repaint();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void Asegment::setMax(int value)
{
	this->max=value;
	set(value);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
