/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"export.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	SERIAL.CPP					(c)	YoY'03						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<windows.h>
#include						"serial.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL ACI						Aserial::CI=ACI("Aserial", GUID(0xAE57E515,0x00000420), &Afile::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL Aserial::Aserial(char *name) : Afile(name)
{
	char	pname[256];
	sprintf(pname, "//./%s", name);
	hComm=CreateFile(pname, GENERIC_READ|GENERIC_WRITE, 0, 0, OPEN_EXISTING, 0, 0);
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL Aserial::~Aserial()
{
	if(isOK())
		CloseHandle(hComm);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Aserial::isOK()
{
	return (hComm!=INVALID_HANDLE_VALUE);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Aserial::configure(dword BaudRate, dword ByteSize, dword Parity, dword StopBits, bool rts, bool dtr)
{
	DCB		dcb;
	
	dcb.DCBlength=sizeof(dcb);
	
	if(GetCommState(hComm, &dcb))
	{
		dcb.BaudRate =BaudRate;
		dcb.ByteSize = ByteSize;
		dcb.Parity =Parity ;
		dcb.StopBits =StopBits;
		dcb.fBinary=TRUE;
		dcb.fDsrSensitivity=false;
		dcb.fParity=true;	// check parity enabled
		dcb.fOutX=false;
		dcb.fInX=false;
		dcb.fNull=false;
		dcb.fAbortOnError=TRUE;
		dcb.fOutxCtsFlow=FALSE;
		dcb.fOutxDsrFlow=false;
		dcb.fDtrControl=dtr?DTR_CONTROL_ENABLE:DTR_CONTROL_DISABLE;
		dcb.fDsrSensitivity=false;
		dcb.fRtsControl=rts?RTS_CONTROL_TOGGLE:RTS_CONTROL_DISABLE;
		dcb.fOutxCtsFlow=false;
		dcb.fOutxCtsFlow=false;

		if(SetCommState(hComm, &dcb))
			return true;
	}
    return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Aserial::timeouts(dword ReadIntervalTimeout, dword ReadTotalTimeoutMultiplier, dword ReadTotalTimeoutConstant, dword WriteTotalTimeoutMultiplier, dword WriteTotalTimeoutConstant)
{
	COMMTIMEOUTS	touts;
    if(GetCommTimeouts(hComm, &touts))
    {
		touts.ReadIntervalTimeout =ReadIntervalTimeout;
		touts.ReadTotalTimeoutConstant =ReadTotalTimeoutConstant;
		touts.ReadTotalTimeoutMultiplier =ReadTotalTimeoutMultiplier;
		touts.WriteTotalTimeoutConstant = WriteTotalTimeoutConstant;
		touts.WriteTotalTimeoutMultiplier =WriteTotalTimeoutMultiplier;
		if(SetCommTimeouts (hComm, &touts))
			return true;
	}
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ADLL int Aserial::read(void *p, int s)
{
    dword	dwBytesTransferred=0;
    if(!ReadFile(hComm, p, s, (DWORD *)&dwBytesTransferred, 0))
		return 0;
	return dwBytesTransferred;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL int Aserial::write(void *p, int s)
{
    dword iBytesWritten=0;
    if(WriteFile(hComm, p, s, (DWORD *)&iBytesWritten, NULL)==0)
        return 0;
    else 
        return iBytesWritten;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL void Aserial::flush()
{
	FlushFileBuffers(hComm);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Aserial::readStringAlloc(char **s)
{
	int	len;
	if(read(&len, sizeof(len))!=sizeof(len))
		return false;
	*s=(char *)malloc(len+1);
	if(read(*s, len)!=len)
		return false;
	(*s)[len]=0;
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Aserial::readString(char *s)
{
	int	len;
	if(read(&len, sizeof(len))!=sizeof(len))
		return false;
	if(read(s, len)!=len)
		return false;
	s[len]=0;
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Aserial::writeString(char *s)
{
	int	len=strlen(s);
	if(!write(&len, sizeof(len)))
		return false;
	if(!write(s, len))
		return false;
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL bool Aserial::seek(sqword n)
{
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADLL sqword Aserial::getSize()
{
	return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
