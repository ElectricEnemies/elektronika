/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"elektroexp.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	ETHREAD.CPP					(c)	YoY'04						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<assert.h>
#include						"capsule.h"
#include						"table.h"
#include						"sequencer.h"
#include						"pin.h"
#include						"connect.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL ACI						Acapsule::CI=ACI("Acapsule", GUID(0xE4EC7600,0x00008000), &Anode::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL Acapsule::Acapsule(char *name, Atable *table) : Anode(name)
{
	this->table=table;
	effect=NULL;
	time=0;
	dtime=0;
	beat=0;
	dbeat=0;
	memset(dependency, 0, sizeof(dependency));
	ndependency=0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL Acapsule::~Acapsule()
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL void Acapsule::del()
{
	table->del(effect);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL void Acapsule::select()
{
	table->select(effect);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL void Acapsule::select(Acontrol *c)
{
	table->select(c);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL void Acapsule::addTrack()
{
	table->sequencer->add(effect);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL void Acapsule::run()
{
	cpu=0;
	if(effect->onoff)
	{
		bool	running=true;
		while(running)
		{
			int	i;
			running=false;
			for(i=0; i<ndependency; i++)
				if(dependency[i]->running)
					running=true;
			sleep(1);
		}
		{		
			double	cpuf=Athread::getCpuTime();
			effect->action(time, dtime, beat, dbeat);
			cpu=Athread::getCpuTime()-cpuf;
		}
	}
	running=false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL void Acapsule::calcDependency()
{
	memset(dependency, 0, sizeof(dependency));
	ndependency=0;
	{
		Apin	*p=table->pins;
		while(p)
		{
			if((p->effect==effect)&&((p->type&pinDIR)==pinIN))
			{
				Aconnect	*c=(Aconnect *)table->connects->fchild;
				while(c)
				{
					if(c->in==p)
						dependency[ndependency++]=c->out->effect->capsule;
					c=(Aconnect *)c->next;
				}
			}
			p=p->nextPin;
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
