/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"elektroexp.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	PIN.CPP						(c)	YoY'01						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"pin.h"
#include						"effect.h"
#include						"table.h"
#include						"connect.h"
#include						"elektro.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL ACI						Apin::CI=ACI("Apin", GUID(0xE4EC7600,0x00010020), &Asurface::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL Apin::Apin(QIID qiid, char *name, class AeffectBack *eb, int type, int x, int y, int w, int h) : Asurface(name, eb, x, y, w, h)
{
	this->qiid=qiid;
	effect=eb->effect;
	this->type=type;
	effect->capsule->table->add(this);
	connect=NULL;
	if((type&pinDIR)==pinOUT)
		new Aitem("monitor", "assign monitor", context, contextMONITOR, this);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL Apin::~Apin()
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL bool Apin::mouse(int x, int y, int state, int event)
{
	switch(event)
	{
		case mouseLDOWN:
		father->father->notify(this, nyPINCLICK, 0);
		return TRUE;

		case mouseENTER:
		father->father->notify(this, nyPINENTER, 0);
		break;

		case mouseLEAVE:
		father->father->notify(this, nyPINLEAVE, 0);
		break;
	}
	return FALSE;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL int Apin::getCountConnect()
{
	if(connect)
		return 1;
	{
		Aconnect	*c=(Aconnect *)effect->capsule->table->connects->fchild;
		int			n=0;
		while(c)
		{
			if((c->in==this)||(c->out==this))
				n++;
			c=(Aconnect *)c->next;
		}
		return n;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL bool Apin::canConnect(Apin *pin)
{
	return this->isCI(pin->getCI())&&pin->canConnect(this);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL Apin * Apin::getConnectedPin()
{
	return connect?connect->out:NULL;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL bool Apin::enter(char *dbgfile, int dbgline)
{
	bool	b=Asection::enter(dbgfile, dbgline);
	if(connect)
		connect->out->enter(dbgfile,dbgline);
	return b;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL void Apin::leave()
{
	if(connect)
		connect->out->leave();
	Asection::leave();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL void Apin::paint(Abitmap *b)
{
	Asurface::paint(b);
	if((type&(pinHILIGHT|pinNOGFX))==pinHILIGHT)
	{
		b->boxf(1, 1, 6, 6, 0xff00ff00);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL float Apin::getStreamQuality()
{
	float	q=0.f;
	switch(type&pinDIR)
	{
		case pinIN:
		q=effect->getStreamQuality(this);
		break;

		case pinOUT:
		{
			Aconnect	*c=(Aconnect *)effect->capsule->table->connects->fchild;
			while(c)
			{
				if(c->out==this)
					q+=c->in->getStreamQuality();
				c=(Aconnect *)c->next;
			}
		}
		break;
	}
	return q;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
