/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"elektroexp.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	ZONE.CPP					(c)	YoY'04						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<stdio.h>
#include						<assert.h>
#include						"zone.h"
#include						"interface.h"
#include						"resource.h"
#include						"effect.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACI								Azone::CI	= ACI("Azone",	GUID(0xE4EC7600,0x00010120), &AcontrolObj::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL Azone::Azone(QIID qiid, char *name, Aobject *father, int x, int y, int w, int h, float wsel, float hsel) : AcontrolObj(name, father, x, y, w, h)
{
	control=new Acontrol(qiid, name, Aeffect::getEffect(father), this, Acontrol::CONTROLER_02);
	control->setInfo(Acontrol::CONTROLER_01, "x", 0xff808000);
	control->setInfo(Acontrol::CONTROLER_02, "y", 0xff008000);
	this->wsel=wsel;
	this->hsel=hsel;
	ctrlPaint=false;
	set(0.f, 0.f);
	defxx=-1.f;
	defyy=-1.f;
	test=false;
	testSHIFT=false;
	timer(100);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL Azone::~Azone()
{
	delete(control);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL void Azone::set(float x, float y)
{
	xx=maxi(mini(x, 1.f), 0.f);
	yy=maxi(mini(y, 1.f), 0.f);
	if(defxx==-1)
		defxx=xx;
	if(defyy==-1)
		defyy=yy;
	control->set(Acontrol::CONTROLER_01, xx);
	control->set(Acontrol::CONTROLER_02, yy);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL bool Azone::sequence(int nctrl, float value)
{
	switch(nctrl)
	{
		case Acontrol::CONTROLER_01:
		xx=value;
		break;

		case Acontrol::CONTROLER_02:
		yy=value;
		break;

		default:
		assert(FALSE);
		break;
	}
	ctrlPaint=true;
	father->notify(this, nyCHANGE, 0);
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL bool Azone::keyboard(int event, int ascii, int scan, int state)
{
	switch(event)
	{
		case keyboardDOWN:
		if(state&keyboardALT)
		{
			if((defxx!=-1)&&(defyy!=-1))
				set(defxx, defyy);
			else
				set(0.f, 0.f);
			father->notify(this, nyCHANGE);
			repaint();
			return true;
		}
		if(scan==42)
		{
			int x,y;
			this->mousePosition(&x, &y);
			x0=x;
			y0=y;
			xx0=xx;
			yy0=1.f-yy;
			testSHIFT=true;
		}
		break;

		case keyboardUP:
		if(scan==42)
		{
			int x,y;
			this->mousePosition(&x, &y);
			x0=x;
			y0=y;
			xx0=xx;
			yy0=1.f-yy;
			testSHIFT=false;
		}
		break;

		
	}
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL bool Azone::mouse(int x, int y, int state, int event)
{
	switch(event)
	{
		case mouseLDOWN:
		control->select();
		case mouseNORMAL:
		case mouseLUP:
		cursor(cursorHANDSEL);
		focus(this);
		{
			if(getKeyboardState()&keyboardLALT)
			{
				if((defxx!=-1)&&(defyy!=-1))
					set(defxx, defyy);
				else
					set(0.f, 0.f);
				father->notify(this, nyCHANGE);
				repaint();
				return true;
			}
		}
		switch(event)
		{
			case mouseLDOWN:
			mouseCapture(true);
			test=TRUE;
			x0=x;
			y0=y;
			xx0=xx;
			yy0=1.f-yy;
			if((getKeyboardState()&keyboardLSHIFT)&&(!testSHIFT))
				testSHIFT=true;
			break;
		}
		if(test&&(state&mouseL))
		{
			float sens=testSHIFT?0.01:1;
			xx=mini(maxi(xx0+sens*alib.mouseSensibility*(float)(x-x0), 0.f), 1.f);
			yy=1.f-mini(maxi(yy0-sens*alib.mouseSensibility*(float)(y-y0), 0.f), 1.f);
			control->set(Acontrol::CONTROLER_01, xx);
			control->set(Acontrol::CONTROLER_02, yy);
			repaint();
			father->notify(this, nyCHANGE);
		}
		switch(event)
		{
			case mouseLUP:
			mouseCapture(FALSE);
			test=FALSE;
			testSHIFT=false;
			break;
		}
		return TRUE;
	}
	return FALSE;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL void Azone::pulse()
{
	if(ctrlPaint)
	{
		repaint();
		ctrlPaint=false;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EDLL void Azone::paint(Abitmap *b)
{
	int		wc=pos.w-4;
	int		hc=pos.h-4;
	int		ws=(int)(wc*wsel);
	int		hs=(int)(hc*hsel);
	int		wv=wc-ws;
	int		hv=hc-hs;
	int		x=(int)(wv*xx)+2;
	int		y=(int)(hv*yy)+2;

	b->boxf(0, 0, pos.w, pos.h, 0xff202020);
	b->boxf(x, y, x+ws-1, y+hs-1, 0xffffaa00);

	controlPaint(b, pos.w, pos.h);	
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
