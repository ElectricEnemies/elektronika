/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	APLAYER.CPP					(c)	YoY'01						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"aplayer.h"
#include						"resource.h"
#include						"nekoamp/ampdecoder.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACI								AaplayerInfo::CI	= ACI("AaplayerInfo",	GUID(0x11111112,0x00000070), &AeffectInfo::CI, 0, NULL);
ACI								Aaplayer::CI		= ACI("Aaplayer",		GUID(0x11111112,0x00000071), &Aeffect::CI, 0, NULL);
ACI								AaplayerFront::CI	= ACI("AaplayerFront",	GUID(0x11111112,0x00000072), &AeffectFront::CI, 0, NULL);
ACI								AaplayerBack::CI	= ACI("AaplayerBack",	GUID(0x11111112,0x00000073), &AeffectBack::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class MP3source : public IAMPBitsource
{
public:
	FILE						*fic;
	int							offset;
	bool						ok;

								MP3source						(char *filename);
								~MP3source						();

	virtual int					read							(void *buffer, int bytes);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MP3source::MP3source(char *filename)
{
	offset=0;
	fic=fopen(filename, "rb");
	if(fic)
		ok=TRUE;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MP3source::~MP3source()
{
	if(fic)
		fclose(fic);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int MP3source::read(void *buffer, int bytes)
{
	if(fic)
	{
		int	n=fread(buffer, 1, bytes, fic);
		offset+=n;
		ok=(n==bytes);
		return n;
	}
	return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Aaplayer::Aaplayer(QIID qiid, char *name, AeffectInfo *info, Acapsule *capsule) : Aeffect(qiid, name, info, capsule)
{
	front=new AaplayerFront(qiid, "aplayer front", this, 50);
	front->setTooltips("audio player module (wav, mp3)");
	back=new AaplayerBack(qiid, "aplayer back", this, 50);
	back->setTooltips("audio player module (wav, mp3)");
	mp3=NULL;
	mp3si=NULL;
	mp3source=NULL;
	memset(filename, 0, sizeof(filename));
	ftype=ftypeNOTHING;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Aaplayer::~Aaplayer()
{
	end();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aaplayer::init()
{
	section.enter();
	ftype=ftypeNOTHING;
	if(strstr(filename, ".mp3"))
	{
		mp3si=new AMPStreamInfo();
		mp3source=new MP3source(filename);
		mp3=CreateAMPDecoder();
		mp3->Init();
		mp3->setSource(mp3source);
		try
		{
			mp3->ReadHeader();
			mp3->getStreamInfo(mp3si);
			mp3->setDestination(audioin);
			ftype=ftypeMP3;
			section.leave();
			return true;
		}
		catch(int a)
		{
			delete(mp3);
			mp3=NULL;
			delete(mp3source);
			mp3source=NULL;
			delete(mp3si);
			mp3si=NULL;
			a++;
		}
	}
	section.leave();
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Aaplayer::end()
{
	section.enter();
	ftype=ftypeNOTHING;
	if(mp3)
	{
		delete(mp3);
		mp3=NULL;
	}
	if(mp3source)
	{
		delete(mp3source);
		mp3source=NULL;
	}
	if(mp3si)
	{
		delete(mp3si);
		mp3si=NULL;
	}
	section.leave();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Aaplayer::action(double time, double dtime, double beat, double dbeat)
{
	Asample	*out=((AaplayerBack *)back)->out;
	section.enter();
	out->enter();
	{
		switch(ftype)
		{
			case ftypeMP3:
			if(mp3)
			{
				try 
				{
					int	l=(int)((dtime*44100)/1000);
					while(l>0)
					{
						mp3->PrereadFrame();
						if(mp3->DecodeFrame())
						{
							int	len=mp3->getSampleCount();
							out->addBuffer((sword *)audioin, len>>1);
							l=l-len;
						}
						else
						{
							end();
							init();
						}
					}
				} 
				catch(...)
				{
					end();
					init();
				}
			}
			break;
		}
	}
	out->leave();
	section.leave();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aaplayer::load(class Afile *f)
{
	return ((AaplayerFront *)front)->load(f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aaplayer::save(class Afile *f)
{
	return ((AaplayerFront *)front)->save(f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool AaplayerFront::load(class Afile *f)
{
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool AaplayerFront::save(class Afile *f)
{
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AaplayerFront::AaplayerFront(QIID qiid, char *name, Aaplayer *e, int h) : AeffectFront(qiid, name, e, h)
{
	setTooltips("audio input module");

	Aresobj	o=resource.get(MAKEINTRESOURCE(PNG_SOUNDINPUT), "PNG");
	back=new Abitmap(&o);

	int	hb=(50-32)>>1;

	volume=new Apaddle(MKQIID(qiid, 0x150dfe1f2194a280), "volume", this, 400, hb, paddleBUTTON02);
	volume->setTooltips("volume variator");
	volume->set(0.5f);
	volume->show(TRUE);

	bass=new Apaddle(MKQIID(qiid, 0x1c4d71e93ada7a8c), "bass", this, 258, hb, paddleBUTTON02);
	bass->setTooltips("bass variator");
	bass->set(0.5f);
	bass->show(TRUE);

	medium=new Apaddle(MKQIID(qiid, 0xe9706d585a261348), "medium", this, 298, hb, paddleBUTTON02);
	medium->setTooltips("medium variator");
	medium->set(0.5f);
	medium->show(TRUE);

	treble=new Apaddle(MKQIID(qiid, 0x290649af16b6e900), "treble", this, 338, hb, paddleBUTTON02);
	treble->setTooltips("treble variator");
	treble->set(0.5f);
	treble->show(TRUE);

	left=new Adisplay("left vue meter", this, 450, hb, displayVM0001);
	left->setTooltips("left vue meter");
	left->show(TRUE);

	right=new Adisplay("right vue meter", this, 470, hb, displayVM0001);
	right->setTooltips("right vue meter");
	right->show(TRUE);

	file=new Abutton("file", this, 16, (pos.h-20)>>1, 250-32, 20, "NO AUDIO FILE");
	file->setAlign(Abutton::btALIGNRIGHT);
	file->setTooltips("audio file");
	file->show(TRUE);

	timer(100);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AaplayerFront::~AaplayerFront()
{
	delete(file);
	delete(volume);
	delete(bass);
	delete(medium);
	delete(treble);
	delete(back);
	delete(left);
	delete(right);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AaplayerFront::paint(Abitmap *b)
{
	b->set(0, 0, back, bitmapDEFAULT, bitmapDEFAULT);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool AaplayerFront::notify(Anode *o, int event, dword p)
{
	switch(event)
	{
		case nyCHANGE:
		{
		}
		return TRUE;

		case nyCLICK:
		if(o==file)
		{
			Aaplayer	*aplayer=(Aaplayer *)effect;
			char		ftmp[ALIB_PATH];
			AfileDlg	fdlg=AfileDlg("fileDlg", this, "all sound files\0*.mp3\0mpeg layer3 file MP3\0*.mp3\0", aplayer->filename, AfileDlg::LOAD);
			if(fdlg.getFile(ftmp))
			{
				bool b;
				aplayer->section.enter();
				strcpy(aplayer->filename, ftmp);
				strlwr(aplayer->filename);
				b=aplayer->init();
				aplayer->section.leave();
				if(b)
				{
					strupr(ftmp);
					file->setCaption(ftmp);
					file->setTooltips(ftmp);
				}
				else
				{
					file->setCaption("NO AUDIO FILE");
					file->setTooltips("audio file");
					notify(this, nyERROR, (dword)"can't open or error in audio file");
				}
			}
		}
		return TRUE;
	}
	return AeffectFront::notify(o, event, p);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AaplayerFront::pulse()
{
	Aaplayer	*si=(Aaplayer *)effect;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AaplayerBack::AaplayerBack(QIID qiid, char *name, Aaplayer *e, int h) : AeffectBack(qiid, name, e, h)
{
	Aresobj	o=resource.get(MAKEINTRESOURCE(PNG_SOUNDINPUT2), "PNG");
	back=new Abitmap(&o);

	out=new Asample(MKQIID(qiid, 0x65682d4459572650), "audio out", this, pinOUT, pos.w-18, 10);
	out->setTooltips("audio output");
	out->show(TRUE);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AaplayerBack::~AaplayerBack()
{
	delete(back);
	delete(out);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AaplayerBack::paint(Abitmap *b)
{
	b->set(0, 0, back, bitmapDEFAULT, bitmapDEFAULT);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Aeffect * AaplayerInfo::create(QIID qiid, char *name, Acapsule *capsule)
{
	return new Aaplayer(qiid, name, this, capsule);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Aplugz * aplayerGetInfo()
{
	return new AaplayerInfo("aplayerInfo", &Aaplayer::CI, "audio player", "audio player module (wav, mp3)");
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
