/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	DXFILTER.H					(c)	YoY'00						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_DXFILTER_H_
#define							_DXFILTER_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<interface.h>
#include						"../elektro/elektro.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							guidDXFILTER					(Adxfilter::CI.guid)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							MAXDXFILTER						1024

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef interface				ICreateDevEnum					ICreateDevEnum;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct ASdxfilter
{
	CLSID						clsid;
	char						*name;
} ATdxfilter;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Adxfilter : public Aeffect
{
	AOBJ

								Adxfilter						(QIID qiid, char *name, AeffectInfo *info, Acapsule *capsule);
	virtual						~Adxfilter						();

	virtual void				action							(double time, double dtime, double beat, double dbeat) {}

	virtual bool				save							(Afile *f);
	virtual bool				load							(Afile *f);

	virtual int					priority						()	{ return priorityFILTER; }

	bool						initDX							();
	void						closeDX							();
	bool						getFilters						();

	ATdxfilter					dev[MAXDXFILTER];
	int							ndev;
	bool						bOK;
	ICreateDevEnum				*m_pSysDevEnum;

	class Adxgfx				*dx;
	Asection					sectionDX;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AdxfilterFront : public AeffectFront
{
	AOBJ

								AdxfilterFront					(QIID qiid, char *name, Adxfilter *e, int h);
	virtual						~AdxfilterFront					();

	bool						save							(Afile *f);
	bool						load							(Afile *f);

	bool						notify							(Anode *o, int event, dword p);
	void						paint							(Abitmap *b);

	//void						pulse							();

	Abitmap						*back;
	Alist						*drivers;
	Aitem						*driverItems;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AdxfilterBack : public AeffectBack
{
	AOBJ

								AdxfilterBack					(QIID qiid, char *name, Adxfilter *e, int h);
	virtual						~AdxfilterBack					();

	void						paint							(Abitmap *b);

	Abitmap						*back;

	Asample						*in;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AdxfilterInfo : public AeffectInfo
{
	AOBJ 

								AdxfilterInfo					(char *name, ACI *eci, char *ename, char *ehelp);
	virtual int					getEffectClass					() { return EFFECTAUDIO; }
	virtual dword				version							() { return 0x00010500; }

	virtual Aeffect *			create							(QIID qiid, char *name, Acapsule *capsule);
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__inline AdxfilterInfo::AdxfilterInfo(char *name, ACI *eci, char *ename, char *ehelp) : AeffectInfo(name, eci, ename, ehelp)
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Aplugz *					dxfilterGetInfo					();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_DXFILTER_H
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
