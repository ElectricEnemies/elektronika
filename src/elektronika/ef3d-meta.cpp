/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	ef3f-meta.CPP				(c)	YoY'03						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"ef3d-meta.h"
#include						"resource.h"
#include						<math.h>
#include						<d3d9.h>
#include						<D3dx9mesh.h>
#include						<assert.h>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACI								Aef3dmetaInfo::CI	= ACI("Aef3dmetaInfo",	GUID(0x11111112,0xB0000060), &Aeffect3dInfo::CI, 0, NULL);
ACI								Aef3dmeta::CI		= ACI("Aef3dmeta",		GUID(0x11111112,0xB0000061), &Aeffect3d::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//        +----------+
//       /|7        /|6
//      / |        / |
//     +----------+  |
//    4|  |       |5 |
//     |  |       |  |
//     |  |       |  |
//     |  +-------|--+
//     | / 3      | / 2
//     |/         |/
//     +----------+
//    0            1       

//        +----------+
//      7/|    6    /|
//      / |        /5|
//     +----------+  |
//     |  |  4    |  |11
//     |10|       |  |
//    8|  |       |9 |
//     |  +-------|--+
//     | /     2  | /
//     |/3        |/1
//     +----------+
//           0           

typedef struct
{
	int	e3,rx,ry,rz;
} Tfedge;

static Tfedge	fedge[12]=
{ 
	{ 0, 0, 0, 0},
	{ 2, 1, 0, 0},
	{ 0, 0, 0, 1},
	{ 2, 0, 0, 0},
	
	{ 0, 0, 1, 0},
	{ 2, 1, 1, 0},
	{ 0, 0, 1, 1},
	{ 2, 0, 1, 0},
	
	{ 1, 0, 0, 0},
	{ 1, 1, 0, 0},
	{ 1, 0, 0, 1},
	{ 1, 1, 0, 1}
};

typedef struct
{
	int							x,y,z;
} Tpos;


static Tpos	ppos[8]=
{
	{0,0,0},
	{1,0,0},
	{1,0,1},
	{0,0,1},
	{0,1,0},
	{1,1,0},
	{1,1,1},
	{0,1,1}
};

static int	edges[12][2]=
{
	{0,1}, {1,2}, {3,2}, {0,3},
	{4,5}, {5,6}, {7,6}, {4,7},
	{0,4}, {1,5}, {3,7}, {2,6}
};

static byte elist[256][16] = 
{ 
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 0  
	{ 3,  0,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 1  
	{ 9,  0,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 2  
	{ 3,  1,  8,  1,  9,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 3  
	{11,  1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 4  
	{ 3,  0,  8, 11,  1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 5  
	{11,  9,  2,  9,  0,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 6  
	{ 3,  2,  8,  8,  2, 11,  8, 11,  9, -1, -1, -1, -1, -1, -1, -1}, // 7  
	{ 2,  3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 8 
	{ 2,  0, 10,  0,  8, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 9 
	{ 0,  1,  9, 10,  2,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 10  
	{ 2,  1, 10, 10,  1,  9, 10,  9,  8, -1, -1, -1, -1, -1, -1, -1}, // 11  
	{ 1,  3, 11,  3, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 12  
	{ 1,  0, 11, 11,  0,  8, 11,  8, 10, -1, -1, -1, -1, -1, -1, -1}, // 13  
	{ 0,  3,  9,  9,  3, 10,  9, 10, 11, -1, -1, -1, -1, -1, -1, -1}, // 14  
	{11,  9,  8, 10, 11,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 15  
	{ 8,  4,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 16  
	{ 0,  4,  3,  4,  7,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 17  
	{ 9,  0,  1,  7,  8,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 18  
	{ 9,  4,  1,  1,  4,  7,  1,  7,  3, -1, -1, -1, -1, -1, -1, -1}, // 19  
	{11,  1,  2,  7,  8,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 20  
	{ 7,  3,  4,  4,  3,  0, 11,  1,  2, -1, -1, -1, -1, -1, -1, -1}, // 21  
	{11,  9,  2,  2,  9,  0,  7,  8,  4, -1, -1, -1, -1, -1, -1, -1}, // 22  
	{ 9,  2, 11,  7,  2,  9,  3,  2,  7,  4,  7,  9, -1, -1, -1, -1}, // 23  
	{ 7,  8,  4,  2,  3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 24  
	{ 7, 10,  4,  4, 10,  2,  4,  2,  0, -1, -1, -1, -1, -1, -1, -1}, // 25  
	{ 1,  9,  0,  7,  8,  4, 10,  2,  3, -1, -1, -1, -1, -1, -1, -1}, // 26  
	{10,  4,  7, 10,  9,  4,  2,  9, 10,  1,  9,  2, -1, -1, -1, -1}, // 27  
	{ 1,  3, 11, 11,  3, 10,  4,  7,  8, -1, -1, -1, -1, -1, -1, -1}, // 28  
	{11,  1, 10, 10,  1,  4,  4,  1,  0,  4,  7, 10, -1, -1, -1, -1}, // 29  
	{ 8,  4,  7, 10,  9,  0, 11,  9, 10,  3, 10,  0, -1, -1, -1, -1}, // 30  
	{10,  4,  7,  9,  4, 10, 11,  9, 10, -1, -1, -1, -1, -1, -1, -1}, // 31  
	{ 4,  9,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 32  
	{ 4,  9,  5,  3,  0,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 33  
	{ 4,  0,  5,  0,  1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 34  
	{ 4,  8,  5,  5,  8,  3,  5,  3,  1, -1, -1, -1, -1, -1, -1, -1}, // 35  
	{11,  1,  2,  4,  9,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 36  
	{ 8,  3,  0, 11,  1,  2,  5,  4,  9, -1, -1, -1, -1, -1, -1, -1}, // 37  
	{11,  5,  2,  2,  5,  4,  2,  4,  0, -1, -1, -1, -1, -1, -1, -1}, // 38  
	{ 5,  2, 11,  5,  3,  2,  4,  3,  5,  8,  3,  4, -1, -1, -1, -1}, // 39  
	{ 4,  9,  5, 10,  2,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 40  
	{ 2,  0, 10, 10,  0,  8,  5,  4,  9, -1, -1, -1, -1, -1, -1, -1}, // 41  
	{ 4,  0,  5,  5,  0,  1, 10,  2,  3, -1, -1, -1, -1, -1, -1, -1}, // 42  
	{ 5,  2,  1,  8,  2,  5, 10,  2,  8,  5,  4,  8, -1, -1, -1, -1}, // 43  
	{10, 11,  3,  3, 11,  1,  4,  9,  5, -1, -1, -1, -1, -1, -1, -1}, // 44  
	{ 5,  4,  9,  1,  0,  8,  1,  8, 11, 11,  8, 10, -1, -1, -1, -1}, // 45  
	{ 0,  5,  4, 10,  5,  0, 11,  5, 10,  3, 10,  0, -1, -1, -1, -1}, // 46  
	{ 8,  5,  4, 11,  5,  8, 10, 11,  8, -1, -1, -1, -1, -1, -1, -1}, // 47  
	{ 8,  9,  7,  9,  5,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 48  
	{ 0,  9,  3,  3,  9,  5,  3,  5,  7, -1, -1, -1, -1, -1, -1, -1}, // 49  
	{ 8,  0,  7,  7,  0,  1,  7,  1,  5, -1, -1, -1, -1, -1, -1, -1}, // 50  
	{ 3,  1,  5,  7,  3,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 51  
	{ 8,  9,  7,  7,  9,  5,  2, 11,  1, -1, -1, -1, -1, -1, -1, -1}, // 52  
	{ 2, 11,  1,  0,  9,  5,  0,  5,  3,  3,  5,  7, -1, -1, -1, -1}, // 53  
	{ 2,  8,  0,  5,  8,  2,  7,  8,  5,  2, 11,  5, -1, -1, -1, -1}, // 54  
	{ 5,  2, 11,  3,  2,  5,  7,  3,  5, -1, -1, -1, -1, -1, -1, -1}, // 55  
	{ 5,  7,  9,  9,  7,  8,  2,  3, 10, -1, -1, -1, -1, -1, -1, -1}, // 56  
	{ 7,  9,  5,  2,  9,  7,  0,  9,  2, 10,  2,  7, -1, -1, -1, -1}, // 57  
	{10,  2,  3,  8,  0,  1,  8,  1,  7,  7,  1,  5, -1, -1, -1, -1}, // 58  
	{ 1, 10,  2,  7, 10,  1,  5,  7,  1, -1, -1, -1, -1, -1, -1, -1}, // 59  
	{ 8,  9,  5,  7,  8,  5,  3, 11,  1, 10, 11,  3, -1, -1, -1, -1}, // 60  
	{ 0,  5,  7,  9,  5,  0,  0,  7, 10, 11,  1,  0,  0, 10, 11, -1}, // 61  
	{ 0, 10, 11,  3, 10,  0,  0, 11,  5,  7,  8,  0,  0,  5,  7, -1}, // 62  
	{ 5, 10, 11,  5,  7, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 63  
	{ 5, 11,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 64  
	{ 3,  0,  8,  6,  5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 65  
	{ 1,  9,  0,  6,  5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 66  
	{ 3,  1,  8,  8,  1,  9,  6,  5, 11, -1, -1, -1, -1, -1, -1, -1}, // 67  
	{ 5,  1,  6,  1,  2,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 68  
	{ 5,  1,  6,  6,  1,  2,  8,  3,  0, -1, -1, -1, -1, -1, -1, -1}, // 69  
	{ 5,  9,  6,  6,  9,  0,  6,  0,  2, -1, -1, -1, -1, -1, -1, -1}, // 70  
	{ 8,  5,  9,  2,  5,  8,  6,  5,  2,  8,  3,  2, -1, -1, -1, -1}, // 71  
	{10,  2,  3,  5, 11,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 72  
	{ 8, 10,  0,  0, 10,  2,  5, 11,  6, -1, -1, -1, -1, -1, -1, -1}, // 73  
	{ 9,  0,  1, 10,  2,  3,  6,  5, 11, -1, -1, -1, -1, -1, -1, -1}, // 74  
	{ 6,  5, 11,  2,  1,  9,  2,  9, 10, 10,  9,  8, -1, -1, -1, -1}, // 75  
	{10,  6,  3,  3,  6,  5,  3,  5,  1, -1, -1, -1, -1, -1, -1, -1}, // 76  
	{10,  0,  8,  5,  0, 10,  1,  0,  5,  6,  5, 10, -1, -1, -1, -1}, // 77  
	{ 6,  3, 10,  6,  0,  3,  5,  0,  6,  9,  0,  5, -1, -1, -1, -1}, // 78  
	{ 9,  6,  5, 10,  6,  9,  8, 10,  9, -1, -1, -1, -1, -1, -1, -1}, // 79  
	{ 6,  5, 11,  8,  4,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 80  
	{ 0,  4,  3,  3,  4,  7, 11,  6,  5, -1, -1, -1, -1, -1, -1, -1}, // 81  
	{ 0,  1,  9,  6,  5, 11,  7,  8,  4, -1, -1, -1, -1, -1, -1, -1}, // 82  
	{ 5, 11,  6,  7,  1,  9,  3,  1,  7,  4,  7,  9, -1, -1, -1, -1}, // 83  
	{ 2,  6,  1,  1,  6,  5,  8,  4,  7, -1, -1, -1, -1, -1, -1, -1}, // 84  
	{ 5,  1,  2,  6,  5,  2,  4,  3,  0,  7,  3,  4, -1, -1, -1, -1}, // 85  
	{ 7,  8,  4,  5,  9,  0,  5,  0,  6,  6,  0,  2, -1, -1, -1, -1}, // 86  
	{ 9,  7,  3,  4,  7,  9,  9,  3,  2,  6,  5,  9,  9,  2,  6, -1}, // 87  
	{ 2,  3, 10,  4,  7,  8,  5, 11,  6, -1, -1, -1, -1, -1, -1, -1}, // 88 
	{ 6,  5, 11,  2,  4,  7,  0,  4,  2, 10,  2,  7, -1, -1, -1, -1}, // 89  
	{ 9,  0,  1,  8,  4,  7, 10,  2,  3,  6,  5, 11, -1, -1, -1, -1}, // 90  
	{ 1,  9,  2,  2,  9, 10, 10,  9,  4,  4,  7, 10,  6,  5, 11, -1}, // 91  
	{ 7,  8,  4,  5,  3, 10,  1,  3,  5,  6,  5, 10, -1, -1, -1, -1}, // 92  
	{10,  5,  1,  6,  5, 10, 10,  1,  0,  4,  7, 10, 10,  0,  4, -1}, // 93 
	{ 9,  0,  5,  5,  0,  6,  6,  0,  3,  3, 10,  6,  7,  8,  4, -1}, // 94  
	{ 9,  6,  5, 10,  6,  9,  9,  4,  7,  9,  7, 10, -1, -1, -1, -1}, // 95  
	{ 9, 11,  4, 11,  6,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 96  
	{ 6,  4, 11, 11,  4,  9,  3,  0,  8, -1, -1, -1, -1, -1, -1, -1}, // 97  
	{ 1, 11,  0,  0, 11,  6,  0,  6,  4, -1, -1, -1, -1, -1, -1, -1}, // 98 
	{ 1,  8,  3,  6,  8,  1,  4,  8,  6, 11,  6,  1, -1, -1, -1, -1}, // 99 
	{ 9,  1,  4,  4,  1,  2,  4,  2,  6, -1, -1, -1, -1, -1, -1, -1}, // 100  
	{ 8,  3,  0,  9,  1,  2,  9,  2,  4,  4,  2,  6, -1, -1, -1, -1}, // 101  
	{ 4,  0,  2,  6,  4,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 102  
	{ 2,  8,  3,  4,  8,  2,  6,  4,  2, -1, -1, -1, -1, -1, -1, -1}, // 103  
	{ 9, 11,  4,  4, 11,  6,  3, 10,  2, -1, -1, -1, -1, -1, -1, -1}, // 104  
	{ 2,  0,  8, 10,  2,  8, 11,  4,  9,  6,  4, 11, -1, -1, -1, -1}, // 105  
	{ 2,  3, 10,  6,  0,  1,  4,  0,  6, 11,  6,  1, -1, -1, -1, -1}, // 106  
	{ 1,  6,  4, 11,  6,  1,  1,  4,  8, 10,  2,  1,  1,  8, 10, -1}, // 107  
	{ 4,  9,  6,  6,  9,  3,  3,  9,  1,  3, 10,  6, -1, -1, -1, -1}, // 108  
	{ 1,  8, 10,  0,  8,  1,  1, 10,  6,  4,  9,  1,  1,  6,  4, -1}, // 109  
	{ 6,  3, 10,  0,  3,  6,  4,  0,  6, -1, -1, -1, -1, -1, -1, -1}, // 110  
	{ 8,  6,  4,  8, 10,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 111  
	{ 6,  7, 11, 11,  7,  8, 11,  8,  9, -1, -1, -1, -1, -1, -1, -1}, // 112  
	{ 3,  0,  7,  7,  0, 11, 11,  0,  9, 11,  6,  7, -1, -1, -1, -1}, // 113  
	{ 7, 11,  6,  7,  1, 11,  8,  1,  7,  0,  1,  8, -1, -1, -1, -1}, // 114  
	{ 7, 11,  6,  1, 11,  7,  3,  1,  7, -1, -1, -1, -1, -1, -1, -1}, // 115 
	{ 6,  1,  2,  8,  1,  6,  9,  1,  8,  7,  8,  6, -1, -1, -1, -1}, // 116  
	{ 9,  2,  6,  1,  2,  9,  9,  6,  7,  3,  0,  9,  9,  7,  3, -1}, // 117  
	{ 0,  7,  8,  6,  7,  0,  2,  6,  0, -1, -1, -1, -1, -1, -1, -1}, // 118  
	{ 2,  7,  3,  2,  6,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 119  
	{10,  2,  3,  8, 11,  6,  9, 11,  8,  7,  8,  6, -1, -1, -1, -1}, // 120  
	{ 7,  2,  0, 10,  2,  7,  7,  0,  9, 11,  6,  7,  7,  9, 11, -1}, // 121 
	{ 0,  1,  8,  8,  1,  7,  7,  1, 11, 11,  6,  7, 10,  2,  3, -1}, // 122  
	{ 1, 10,  2,  7, 10,  1,  1, 11,  6,  1,  6,  7, -1, -1, -1, -1}, // 123  
	{ 6,  8,  9,  7,  8,  6,  6,  9,  1,  3, 10,  6,  6,  1,  3, -1}, // 124  
	{ 1,  0,  9,  7, 10,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 125  
	{ 0,  7,  8,  6,  7,  0,  0,  3, 10,  0, 10,  6, -1, -1, -1, -1}, // 126  
	{ 6,  7, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 127  
	{10,  7,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 128  
	{ 8,  3,  0,  6, 10,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 129  
	{ 9,  0,  1,  6, 10,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 130  
	{ 9,  8,  1,  1,  8,  3,  6, 10,  7, -1, -1, -1, -1, -1, -1, -1}, // 131  
	{ 2, 11,  1,  7,  6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 132  
	{11,  1,  2,  8,  3,  0,  7,  6, 10, -1, -1, -1, -1, -1, -1, -1}, // 133  
	{ 0,  2,  9,  9,  2, 11,  7,  6, 10, -1, -1, -1, -1, -1, -1, -1}, // 134  
	{ 7,  6, 10,  3,  2, 11,  3, 11,  8,  8, 11,  9, -1, -1, -1, -1}, // 135  
	{ 3,  7,  2,  7,  6,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 136  
	{ 8,  7,  0,  0,  7,  6,  0,  6,  2, -1, -1, -1, -1, -1, -1, -1}, // 137  
	{ 6,  2,  7,  7,  2,  3,  9,  0,  1, -1, -1, -1, -1, -1, -1, -1}, // 138  
	{ 2,  1,  6,  6,  1,  8,  8,  1,  9,  6,  8,  7, -1, -1, -1, -1}, // 139  
	{ 6, 11,  7,  7, 11,  1,  7,  1,  3, -1, -1, -1, -1, -1, -1, -1}, // 140  
	{ 6, 11,  7, 11,  1,  7,  7,  1,  8,  8,  1,  0, -1, -1, -1, -1}, // 141  
	{ 7,  0,  3, 11,  0,  7,  9,  0, 11,  7,  6, 11, -1, -1, -1, -1}, // 142  
	{11,  7,  6,  8,  7, 11,  9,  8, 11, -1, -1, -1, -1, -1, -1, -1}, // 143  
	{ 4,  6,  8,  6, 10,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 144  
	{10,  3,  6,  6,  3,  0,  6,  0,  4, -1, -1, -1, -1, -1, -1, -1}, // 145  
	{10,  8,  6,  6,  8,  4,  1,  9,  0, -1, -1, -1, -1, -1, -1, -1}, // 146  
	{ 6,  9,  4,  3,  9,  6,  1,  9,  3,  6, 10,  3, -1, -1, -1, -1}, // 147  
	{ 4,  6,  8,  8,  6, 10,  1,  2, 11, -1, -1, -1, -1, -1, -1, -1}, // 148  
	{11,  1,  2, 10,  3,  0, 10,  0,  6,  6,  0,  4, -1, -1, -1, -1}, // 149  
	{ 8,  4, 10, 10,  4,  6,  9,  0,  2,  9,  2, 11, -1, -1, -1, -1}, // 150  
	{ 3, 11,  9,  2, 11,  3,  3,  9,  4,  6, 10,  3,  3,  4,  6, -1}, // 151  
	{ 3,  8,  2,  2,  8,  4,  2,  4,  6, -1, -1, -1, -1, -1, -1, -1}, // 152  
	{ 2,  0,  4,  2,  4,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 153  
	{ 0,  1,  9,  4,  2,  3,  6,  2,  4,  8,  4,  3, -1, -1, -1, -1}, // 154  
	{ 4,  1,  9,  2,  1,  4,  6,  2,  4, -1, -1, -1, -1, -1, -1, -1}, // 155  
	{ 3,  8,  1,  1,  8,  6,  6,  8,  4,  1,  6, 11, -1, -1, -1, -1}, // 156  
	{ 0, 11,  1,  6, 11,  0,  4,  6,  0, -1, -1, -1, -1, -1, -1, -1}, // 157  
	{ 3,  4,  6,  8,  4,  3,  3,  6, 11,  9,  0,  3,  3, 11,  9, -1}, // 158  
	{ 4, 11,  9,  4,  6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 159  
	{ 5,  4,  9, 10,  7,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 160  
	{ 3,  0,  8,  5,  4,  9,  6, 10,  7, -1, -1, -1, -1, -1, -1, -1}, // 161  
	{ 1,  5,  0,  0,  5,  4, 10,  7,  6, -1, -1, -1, -1, -1, -1, -1}, // 162  
	{ 6, 10,  7,  4,  8,  3,  4,  3,  5,  5,  3,  1, -1, -1, -1, -1}, // 163  
	{ 4,  9,  5,  2, 11,  1, 10,  7,  6, -1, -1, -1, -1, -1, -1, -1}, // 164  
	{ 7,  6, 10, 11,  1,  2,  3,  0,  8,  5,  4,  9, -1, -1, -1, -1}, // 165  
	{10,  7,  6, 11,  5,  4, 11,  4,  2,  2,  4,  0, -1, -1, -1, -1}, // 166  
	{ 8,  3,  4,  4,  3,  5,  5,  3,  2,  2, 11,  5,  6, 10,  7, -1}, // 167  
	{ 3,  7,  2,  2,  7,  6,  9,  5,  4, -1, -1, -1, -1, -1, -1, -1}, // 168  
	{ 4,  9,  5,  6,  0,  8,  2,  0,  6,  7,  6,  8, -1, -1, -1, -1}, // 169  
	{ 2,  3,  6,  6,  3,  7,  0,  1,  5,  0,  5,  4, -1, -1, -1, -1}, // 170  
	{ 8,  6,  2,  7,  6,  8,  8,  2,  1,  5,  4,  8,  8,  1,  5, -1}, // 171 
	{ 4,  9,  5,  6, 11,  1,  6,  1,  7,  7,  1,  3, -1, -1, -1, -1}, // 172  
	{11,  1,  6,  6,  1,  7,  7,  1,  0,  0,  8,  7,  4,  9,  5, -1}, // 173  
	{11,  4,  0,  5,  4, 11, 11,  0,  3,  7,  6, 11, 11,  3,  7, -1}, // 174  
	{11,  7,  6,  8,  7, 11, 11,  5,  4, 11,  4,  8, -1, -1, -1, -1}, // 175  
	{ 5,  6,  9,  9,  6, 10,  9, 10,  8, -1, -1, -1, -1, -1, -1, -1}, // 176  
	{10,  3,  6,  3,  0,  6,  6,  0,  5,  5,  0,  9, -1, -1, -1, -1}, // 177  
	{ 8,  0, 10, 10,  0,  5,  5,  0,  1, 10,  5,  6, -1, -1, -1, -1}, // 178  
	{ 3,  6, 10,  5,  6,  3,  1,  5,  3, -1, -1, -1, -1, -1, -1, -1}, // 179  
	{11,  1,  2, 10,  9,  5,  8,  9, 10,  6, 10,  5, -1, -1, -1, -1}, // 180  
	{ 3,  0, 10, 10,  0,  6,  6,  0,  9,  9,  5,  6, 11,  1,  2, -1}, // 181  
	{ 5, 10,  8,  6, 10,  5,  5,  8,  0,  2, 11,  5,  5,  0,  2, -1}, // 182  
	{ 3,  6, 10,  5,  6,  3,  3,  2, 11,  3, 11,  5, -1, -1, -1, -1}, // 183  
	{ 9,  5,  8,  8,  5,  2,  2,  5,  6,  2,  3,  8, -1, -1, -1, -1}, // 184  
	{ 6,  9,  5,  0,  9,  6,  2,  0,  6, -1, -1, -1, -1, -1, -1, -1}, // 185  
	{ 8,  1,  5,  0,  1,  8,  8,  5,  6,  2,  3,  8,  8,  6,  2, -1}, // 186  
	{ 6,  1,  5,  6,  2,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 187  
	{ 6,  1,  3, 11,  1,  6,  6,  3,  8,  9,  5,  6,  6,  8,  9, -1}, // 188  
	{ 0, 11,  1,  6, 11,  0,  0,  9,  5,  0,  5,  6, -1, -1, -1, -1}, // 189  
	{ 8,  0,  3, 11,  5,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 190  
	{ 6, 11,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 191  
	{11, 10,  5, 10,  7,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 192  
	{11, 10,  5,  5, 10,  7,  0,  8,  3, -1, -1, -1, -1, -1, -1, -1}, // 193  
	{ 7,  5, 10, 10,  5, 11,  0,  1,  9, -1, -1, -1, -1, -1, -1, -1}, // 194  
	{ 5, 11,  7,  7, 11, 10,  1,  9,  8,  1,  8,  3, -1, -1, -1, -1}, // 195  
	{ 2, 10,  1,  1, 10,  7,  1,  7,  5, -1, -1, -1, -1, -1, -1, -1}, // 196  
	{ 3,  0,  8,  7,  1,  2,  5,  1,  7, 10,  7,  2, -1, -1, -1, -1}, // 197  
	{ 5,  9,  7,  7,  9,  2,  2,  9,  0,  7,  2, 10, -1, -1, -1, -1}, // 198  
	{ 2,  7,  5, 10,  7,  2,  2,  5,  9,  8,  3,  2,  2,  9,  8, -1}, // 199  
	{11,  2,  5,  5,  2,  3,  5,  3,  7, -1, -1, -1, -1, -1, -1, -1}, // 200  
	{ 0,  8,  2,  2,  8,  5,  5,  8,  7,  5, 11,  2, -1, -1, -1, -1}, // 201  
	{ 1,  9,  0,  3,  5, 11,  7,  5,  3,  2,  3, 11, -1, -1, -1, -1}, // 202  
	{ 2,  9,  8,  1,  9,  2,  2,  8,  7,  5, 11,  2,  2,  7,  5, -1}, // 203  
	{ 5,  1,  3,  5,  3,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 204  
	{ 7,  0,  8,  1,  0,  7,  5,  1,  7, -1, -1, -1, -1, -1, -1, -1}, // 205  
	{ 3,  9,  0,  5,  9,  3,  7,  5,  3, -1, -1, -1, -1, -1, -1, -1}, // 206  
	{ 7,  9,  8,  7,  5,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 207  
	{ 4,  5,  8,  8,  5, 11,  8, 11, 10, -1, -1, -1, -1, -1, -1, -1}, // 208  
	{ 4,  5,  0,  0,  5, 10, 10,  5, 11,  0, 10,  3, -1, -1, -1, -1}, // 209  
	{ 9,  0,  1, 11,  8,  4, 10,  8, 11,  5, 11,  4, -1, -1, -1, -1}, // 210  
	{ 4, 11, 10,  5, 11,  4,  4, 10,  3,  1,  9,  4,  4,  3,  1, -1}, // 211  
	{ 1,  2,  5,  5,  2,  8,  8,  2, 10,  8,  4,  5, -1, -1, -1, -1}, // 212  
	{10,  0,  4,  3,  0, 10, 10,  4,  5,  1,  2, 10, 10,  5,  1, -1}, // 213  
	{ 5,  0,  2,  9,  0,  5,  5,  2, 10,  8,  4,  5,  5, 10,  8, -1}, // 214  
	{ 5,  9,  4,  3,  2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 215  
	{11,  2,  5,  2,  3,  5,  5,  3,  4,  4,  3,  8, -1, -1, -1, -1}, // 216  
	{ 2,  5, 11,  4,  5,  2,  0,  4,  2, -1, -1, -1, -1, -1, -1, -1}, // 217  
	{ 2,  3, 11, 11,  3,  5,  5,  3,  8,  8,  4,  5,  9,  0,  1, -1}, // 218  
	{ 2,  5, 11,  4,  5,  2,  2,  1,  9,  2,  9,  4, -1, -1, -1, -1}, // 219  
	{ 5,  8,  4,  3,  8,  5,  1,  3,  5, -1, -1, -1, -1, -1, -1, -1}, // 220  
	{ 5,  0,  4,  5,  1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 221  
	{ 5,  8,  4,  3,  8,  5,  5,  9,  0,  5,  0,  3, -1, -1, -1, -1}, // 222  
	{ 5,  9,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 223  
	{ 7,  4, 10, 10,  4,  9, 10,  9, 11, -1, -1, -1, -1, -1, -1, -1}, // 224  
	{ 3,  0,  8,  7,  4,  9,  7,  9, 10, 10,  9, 11, -1, -1, -1, -1}, // 225  
	{10,  1, 11,  4,  1, 10,  0,  1,  4, 10,  7,  4, -1, -1, -1, -1}, // 226  
	{ 4,  3,  1,  8,  3,  4,  4,  1, 11, 10,  7,  4,  4, 11, 10, -1}, // 227  
	{ 7,  4, 10,  4,  9, 10, 10,  9,  2,  2,  9,  1, -1, -1, -1, -1}, // 228  
	{ 4,  9,  7,  7,  9, 10, 10,  9,  1,  1,  2, 10,  3,  0,  8, -1}, // 229  
	{ 4, 10,  7,  2, 10,  4,  0,  2,  4, -1, -1, -1, -1, -1, -1, -1}, // 230  
	{ 4, 10,  7,  2, 10,  4,  4,  8,  3,  4,  3,  2, -1, -1, -1, -1}, // 231  
	{11,  2,  9,  9,  2,  7,  7,  2,  3,  9,  7,  4, -1, -1, -1, -1}, // 232  
	{ 7,  9, 11,  4,  9,  7,  7, 11,  2,  0,  8,  7,  7,  2,  0, -1}, // 233  
	{11,  3,  7,  2,  3, 11, 11,  7,  4,  0,  1, 11, 11,  4,  0, -1}, // 234  
	{ 2,  1, 11,  4,  8,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 235  
	{ 1,  4,  9,  7,  4,  1,  3,  7,  1, -1, -1, -1, -1, -1, -1, -1}, // 236  
	{ 1,  4,  9,  7,  4,  1,  1,  0,  8,  1,  8,  7, -1, -1, -1, -1}, // 237  
	{ 3,  4,  0,  3,  7,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 238  
	{ 7,  4,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 239  
	{ 8,  9, 11,  8, 11, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 240  
	{ 9,  3,  0, 10,  3,  9, 11, 10,  9, -1, -1, -1, -1, -1, -1, -1}, // 241  
	{11,  0,  1,  8,  0, 11, 10,  8, 11, -1, -1, -1, -1, -1, -1, -1}, // 242  
	{11,  3,  1, 11, 10,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 243  
	{10,  1,  2,  9,  1, 10,  8,  9, 10, -1, -1, -1, -1, -1, -1, -1}, // 244  
	{ 9,  3,  0, 10,  3,  9,  9,  1,  2,  9,  2, 10, -1, -1, -1, -1}, // 245  
	{10,  0,  2, 10,  8,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 246  
	{10,  3,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 247  
	{ 8,  2,  3, 11,  2,  8,  9, 11,  8, -1, -1, -1, -1, -1, -1, -1}, // 248  
	{ 2,  9, 11,  2,  0,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 249  
	{ 8,  2,  3, 11,  2,  8,  8,  0,  1,  8,  1, 11, -1, -1, -1, -1}, // 250  
	{ 2,  1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 251  
	{ 8,  1,  3,  8,  9,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 252  
	{ 1,  0,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 253  
	{ 8,  0,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, // 254  
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}  // 255  
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
struct CUSTOMVERTEX
{
    FLOAT						x, y, z, rhw;
    DWORD						color;
    float						u,v;
};
*/

struct CUSTOMVERTEX
{
    D3DXVECTOR3 position; // The 3-D position for the vertex.
    D3DXVECTOR3 normal;   // The surface normal for the vertex.
    dword		color;
    float		u,v;
};

// Custom FVF.
#define D3DFVF_CUSTOMVERTEX (D3DFVF_XYZ|D3DFVF_NORMAL|D3DFVF_DIFFUSE|D3DFVF_TEX1)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//#define D3DFVF_CUSTOMVERTEX		(D3DFVF_XYZRHW|D3DFVF_DIFFUSE|D3DFVF_TEX1)
#define NBTRIANGLES				((META_GRIDSIZE*META_GRIDSIZE*META_GRIDSIZE)*2)
#define	NBVERTICES				(NBTRIANGLES*3)
#define	VBUFSIZE				(sizeof(CUSTOMVERTEX)*NBVERTICES)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Adatameta
{
public:
	IDirect3DVertexBuffer9		*vb;
	float						azoom;
	float						abass;
	float						amedium;
	float						metapos;
	float						aseuil;
	
	Adatameta()
	{
		vb=NULL;
		azoom=0.f;
		abass=0.f;
		amedium=0.f;
		metapos=0.f;
		aseuil=0.f;
	}
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int						count=0;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void init()
{
	count++;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void end()
{
	count--;
	if(count==0)
	{
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static char *efan[]=
{
	"number of metaballs",
	"speed",
	"bass vibes",
	"medium vibes"
};

static QIID qiidefa[]={0x31b3bc3aa1fcede0, 0x0c983996cfe01b38, 0x50db7890aed9a000, 0x27e4ff313e9d71c0};

Aef3dmeta::Aef3dmeta(QIID qiid, char *name, Aobject *f, int x, int y) : Aeffect3d(qiid, name, f, x, y)
{
	char	str[1024];
	init();
	dt=new Adatameta();
	
	Aresobj	o=resource.get(MAKEINTRESOURCE(PNG_EF3D_META), "PNG");
	back=new Abitmap(&o);

	setTooltips("meta balls effect");
	
	memset(grid, 0, sizeof(grid));
	memset(test, 0, sizeof(test));

	sprintf(str, "%s/zoom", name);
	zoom=new Apaddle(MKQIID(qiid,0xfd84c05b0a588d60), str, this, 108, 44, paddleYOLI24);
	zoom->setTooltips("zoom");
	zoom->set(0.5f);
	zoom->show(TRUE);

	sprintf(str, "%s/amplitude", name);
	mastef=new Apaddle(MKQIID(qiid,0x578e388667825f80), str, this, 112, 20, paddleYOLI16);
	mastef->setTooltips("amplitude");
	mastef->set(0.5f);
	mastef->show(TRUE);

	{
		int	i;
		for(i=0; i<4; i++)
		{
			int	n=i&3;
			sprintf(str, "%s/%s", name, efan[i]);
			efa[i]=new Apaddle(MKQIID(qiid,qiidefa[i]), str, this, 70+n*24+(i&2)*6, 30, paddleYOLI16);
			efa[i]->setTooltips(efan[i]);
			efa[i]->set((i==1)?0.5f:0.f);
			efa[i]->show(TRUE);
		}
	}
	
	settings(false);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Aef3dmeta::~Aef3dmeta()
{
	int	i;
	for(i=0; i<4; i++)
		delete(efa[i]);
	delete(mastef);
	delete(zoom);
	delete(dt);
	delete(back);
	end();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dmeta::notify(Anode *o, int event, dword p)
{
	return Aobject::notify(o, event, p);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Aef3dmeta::paint(Abitmap *b)
{
	b->set(0, 0, back, bitmapDEFAULT, bitmapDEFAULT);
	//b->boxfa(0, 0, pos.w, pos.h, 0xff000000, 0.1f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dmeta::save(class Afile *f)
{
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dmeta::load(class Afile *f)
{
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Aef3dmeta::settings(bool emergency)
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dmeta::init3D(Aef3dInfo *info)
{
	if(FAILED(info->d3d->d3dev->CreateVertexBuffer(VBUFSIZE, 0, D3DFVF_CUSTOMVERTEX, D3DPOOL_DEFAULT, &dt->vb, NULL)))
		return false;
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dmeta::release3D(Aef3dInfo *info)
{
	if(dt->vb)
		dt->vb->Release();
	dt->vb=NULL;
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static float calcNrgy(int nmeta, float *xs, float *ys, float *zs, float x, float y, float z)
{
	double	v=0;
	int		i;

	for(i=0; i<nmeta; i++)					
	{
		double	dxs=xs[i]-x;
		double	dys=ys[i]-y;
		double	dzs=zs[i]-z;
		v+=(exp(-10*(dxs*dxs+dys*dys+dzs*dzs)));
	}
	
	return (float)v;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dmeta::action(Aef3dInfo *info)
{
	Ad3d				*d3d=info->d3d;
	Aeffect				*e=Aeffect::getEffect(this);
	float				w=(float)d3d->w;
	float				h=(float)d3d->h;
	byte				rc,gc,bc;
	CUSTOMVERTEX		*pVertices;
	HRESULT				r;
	TmetaInfo			*vertlist[NBVERTICES];
	int					nvert=0;
	double				mg=(double)META_GRIDSIZE/2.0;
	dword				difcol;
	float				seuil=dt->aseuil=dt->aseuil*0.5f+(1.f-mastef->get()*0.9f)*0.5f;
	float				xs[8],ys[8],zs[8];
	int					nmeta=(int)(1.f+efa[0]->get()*7.9f);
	int					texType;
	float				texCx,texCy;
	IDirect3DTexture9	*tex=info->input->getTexture(&texType, &texCx, &texCy);

	if(!tex)
	{
		assert(false);
		return false;
	}
		
	colorRGB(&rc,&gc, &bc, info->color);
	difcol=D3DCOLOR_RGBA(rc, gc, bc, (int)(info->power*255.99f));
	memset(this->info, 0, sizeof(this->info));

	{	// sphere
		int		x,y,z;
		float	gb=efa[2]->get();
		float	gm=efa[3]->get();
		dt->abass=dt->abass*(1.f-gb)+info->sound->bass*gb;
		dt->amedium=dt->amedium*(1.f-gm)+info->sound->medium*gm;
		float	ss=dt->abass*4.f+dt->amedium*4.f;
		int		i;
		dt->metapos+=(float)(info->dbeat*(efa[1]->get()-0.5f)*10.f);
		for(i=0; i<nmeta; i++)
		{
			float	v=(float)i/4.f+1.f;
			xs[i]=(float)(sin(ss+dt->metapos*0.25*v))*0.5f;
			ys[i]=(float)(sin(ss+dt->metapos*0.23*v))*0.5f;
			zs[i]=(float)(sin(ss+dt->metapos*0.21*v))*0.5f;
		}
		for(z=1; z<META_GRIDSIZE-1; z++)
		{
			double	dz=((double)z-mg)/mg;
			for(y=1; y<META_GRIDSIZE-1; y++)
			{
				double	dy=((double)y-mg)/mg;
				float	*g=&grid[z][y][1];
				for(x=1; x<META_GRIDSIZE-1; x++)
				{
					double	dx=((double)x-mg)/mg;
					float	v=0;

					for(i=0; i<nmeta; i++)					
					{
						double	dxs=xs[i]-dx;
						double	dys=ys[i]-dy;
						double	dzs=zs[i]-dz;
						v+=(float)((exp(-10*(dxs*dxs+dys*dys+dzs*dzs))));
					}
					*(g++)=v;
				}
			}
		}
	}
	
	{	// calc seuil
		int			x,y,z;
		float		*g=&grid[0][0][0];
		byte		*t=&test[0][0][0];
		for(z=0; z<META_GRIDSIZE; z++)
		{
			for(y=0; y<META_GRIDSIZE; y++)
			{
				for(x=0; x<META_GRIDSIZE; x++)
					*(t++)=(*(g++)<seuil)&1;
			}
		}
	}

	{	// compute faces, vertives, normals
		int				x,y,z;
		for(z=0; z<(META_GRIDSIZE-1); z++)
		{
			for(y=0; y<(META_GRIDSIZE-1); y++)
			{
				for(x=0; x<(META_GRIDSIZE-1); x++)
				{
					float		value[8];
					Tpos		*pp=ppos;
					int			mask=0;
					int			i;
					for(i=0; i<8; i++)
					{
						int	xx=x+pp->x;
						int	yy=y+pp->y;
						int	zz=z+pp->z;
						int	vt=test[zz][yy][xx];
						value[i]=grid[zz][yy][xx];
						mask|=vt<<i;
						pp++;
					}
					{
						byte	*ed=&elist[mask][0];
						while(*ed!=(byte)-1)
						{
							//TmetaInfo	*mim[3];
							for(i=0; i<3; i++)
							{
								Tfedge		*fed=&fedge[*ed];	
								TmetaInfo	*mi=&this->info[z+fed->rz][y+fed->ry][x+fed->rx][fed->e3];
								//mim[i]=mi;
								if(!mi->status)
								{
									int		p0=edges[*ed][0];
									int		p1=edges[*ed][1];
									float	x0=(float)(x+ppos[p0].x);
									float	y0=(float)(y+ppos[p0].y);
									float	z0=(float)(z+ppos[p0].z);
									float	x1=(float)(x+ppos[p1].x);
									float	y1=(float)(y+ppos[p1].y);
									float	z1=(float)(z+ppos[p1].z);
									float	sv=(seuil-value[p0])/(value[p1]-value[p0]);
									mi->pos.x=(float)(((x1-x0)*sv+x0)-mg);
									mi->pos.y=(float)(((y1-y0)*sv+y0)-mg)*1.2f;
									mi->pos.z=(float)(((z1-z0)*sv+z0)-mg);
									mi->status=1;
								}
								vertlist[nvert++]=mi;
								ed++;
							}
							/*
							{	// calc normal face
								float	nx= + (mim[1]->pos.y-mim[0]->pos.y)*(mim[2]->pos.z-mim[0]->pos.z) - (mim[1]->pos.z-mim[0]->pos.z)*(mim[2]->pos.y-mim[0]->pos.y) ;
								float	ny= + (mim[1]->pos.x-mim[0]->pos.x)*(mim[2]->pos.z-mim[0]->pos.z) - (mim[1]->pos.z-mim[0]->pos.z)*(mim[2]->pos.x-mim[0]->pos.x) ;
								float	nz= + (mim[1]->pos.x-mim[0]->pos.x)*(mim[2]->pos.y-mim[0]->pos.y) - (mim[1]->pos.y-mim[0]->pos.y)*(mim[2]->pos.x-mim[0]->pos.x) ;
								
								double	d=1.0/sqrt(nx*nx+ny*ny+nz*nz);
								nx=(float)(nx*d);
								ny=(float)(ny*d);
								nz=(float)(nz*d);

								int		i;
								for(i=0; i<3; i++)
								{
									mim[i]->normal.x+=nx;
									mim[i]->normal.y+=ny;
									mim[i]->normal.z+=nz;
								}
							}
							*/
							if(nvert>=NBVERTICES)
								goto fin;
						}
					}
				}
			}
		}
	}
	fin:

	if(dt->vb->Lock(0, VBUFSIZE, (void**)&pVertices, 0)==D3D_OK)	// send vertices
	{
		CUSTOMVERTEX	*v=pVertices;
		int				i;
		
		for(i=0; i<nvert; i++)
		{
			TmetaInfo	*mi=vertlist[i];
			float		nx=mi->normal.x;
			float		ny=mi->normal.y;
			float		nz=mi->normal.z;
			if(!(mi->status&2))
			{
				float	xx=(float)(mi->pos.x/mg);
				float	yy=(float)(mi->pos.y/mg);
				float	zz=(float)(mi->pos.z/mg);
				float	f=calcNrgy(nmeta, xs, ys, zs, xx, yy, zz);
				float	fx=calcNrgy(nmeta, xs, ys, zs, xx+0.01f, yy, zz);
				float	fy=calcNrgy(nmeta, xs, ys, zs, xx, yy+0.01f, zz);
				float	fz=calcNrgy(nmeta, xs, ys, zs, xx, yy, zz+0.01f);
				nx=fx-f;
				ny=f-fy;
				nz=fz-f;
				{
					double	d=1.0/sqrt(nx*nx+ny*ny+nz*nz);
					mi->normal.x=nx=(float)(nx*d);
					mi->normal.y=ny=(float)(ny*d);
					mi->normal.z=nz=(float)(nz*d);
					mi->status|=2;
				}
			}
			
			v->position.x=mi->pos.x;
			v->position.y=mi->pos.y;
			v->position.z=-mi->pos.z;
			v->normal.x=nx;
			v->normal.y=ny;
			v->normal.z=nz;
			v->u=(-nx*0.5f+0.5f)*texCx;
			v->v=(-ny*0.5f+0.5f)*texCy;
			v->color=difcol;
			v++;
			//nc=(nc+1)%3;
		}	
		dt->vb->Unlock();
	}
	
	{	// matrix
		D3DXMATRIX	matWorld;
		D3DXMATRIX	matView;
		D3DXMATRIX	matProj;
		D3DXMATRIX	matTemp1;
		D3DXMATRIX	matTemp2;
	
		d3d->d3dev->BeginScene();

		D3DXMatrixRotationY(&matTemp1, 0.f);
		D3DXMatrixRotationZ(&matTemp2, 0.f);
		D3DXMatrixMultiply(&matWorld, &matTemp1, &matTemp2);
	
		d3d->d3dev->SetTransform(D3DTS_WORLD, &matWorld);
	
		// view matrix
		D3DXMatrixLookAtLH( &matView,	&D3DXVECTOR3( 0.0f, 0.0f, -30.f+((dt->azoom=dt->azoom*0.5f+zoom->get()*0.5f)-0.5f)*50.f ),
										&D3DXVECTOR3( 0.0f, 0.0f, 0.0f ),
										&D3DXVECTOR3( 0.0f, 1.0f, 0.0f ) );
									
		d3d->d3dev->SetTransform(D3DTS_VIEW, &matView);
	
		// projection matrix
		D3DXMatrixPerspectiveFovLH(&matProj, D3DX_PI/4, 1.0f, 1.0f, 1000.0f );
		d3d->d3dev->SetTransform(D3DTS_PROJECTION, &matProj);
	}	

	// light
	{
		D3DXVECTOR3 vecDir;
		D3DLIGHT9	light;
		ZeroMemory(&light, sizeof(light));
		light.Type = D3DLIGHT_DIRECTIONAL;

		light.Diffuse.r = 1.0f;
		light.Diffuse.g = 1.0f;
		light.Diffuse.b = 1.0f;
		
		vecDir=D3DXVECTOR3(1.f, 1.f, 1.f);
		D3DXVec3Normalize((D3DXVECTOR3*)&light.Direction, &vecDir);

		light.Range = 1000.0f;

		d3d->d3dev->SetLight(0, &light);
		d3d->d3dev->LightEnable(0, TRUE);
	}

	d3d->d3dev->SetRenderState(D3DRS_LIGHTING, TRUE);
	d3d->d3dev->SetRenderState(D3DRS_AMBIENT, 0xff202020);

	r=d3d->d3dev->SetStreamSource(0, dt->vb, 0, sizeof(CUSTOMVERTEX));
	r=d3d->d3dev->SetFVF(D3DFVF_CUSTOMVERTEX);

	r=d3d->d3dev->SetTexture(0, tex);
	tex->Release();

	r=d3d->d3dev->SetTextureStageState(0, D3DTSS_TEXCOORDINDEX, 0);

	r=d3d->d3dev->SetSamplerState(0, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR);
	r=d3d->d3dev->SetSamplerState(0, D3DSAMP_MINFILTER, D3DTEXF_LINEAR);
	
	r=d3d->d3dev->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);
	r=d3d->d3dev->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
	r=d3d->d3dev->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

	r=d3d->d3dev->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
	r=d3d->d3dev->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
	
	if(info->colorBoost)
		r=d3d->d3dev->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE2X);
	else
		r=d3d->d3dev->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

/*
	if(nin==5)
		r=d3d->d3dev->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG2);
*/

	r=d3d->d3dev->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

	switch(info->bm)
	{
		case Aef3dInfo::blendFADE:	// normal
		r=d3d->d3dev->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
		r=d3d->d3dev->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);
		r=d3d->d3dev->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);
		break;
		
		case Aef3dInfo::blendADD:	// add
		r=d3d->d3dev->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
		r=d3d->d3dev->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);
		r=d3d->d3dev->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);
		break;

		case Aef3dInfo::blendSUB:	// sub
		r=d3d->d3dev->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
		r=d3d->d3dev->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);
		r=d3d->d3dev->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_REVSUBTRACT);
		break;
	}

	//d3d->d3dev->SetRenderState(D3DRS_CULLMODE, D3DCULL_CW);
	d3d->d3dev->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

	d3d->d3dev->SetRenderState(D3DRS_ZENABLE, TRUE);
	r=d3d->d3dev->DrawPrimitive(D3DPT_TRIANGLELIST, 0, nvert/3);
	d3d->d3dev->SetRenderState(D3DRS_ZENABLE, FALSE);

	d3d->d3dev->LightEnable(0, FALSE);

	d3d->d3dev->EndScene();

	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dmeta::fillSurface()
{
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Aeffect3d * Aef3dmetaInfo::create(QIID qiid, char *name, Aobject *father, int x, int y)
{
	return new Aef3dmeta(qiid, name, father, x, y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Aplugz * ef3dmetaGetInfo()
{
	return new Aef3dmetaInfo("meta", &Aef3dmeta::CI, "meta", "meta balls");
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
