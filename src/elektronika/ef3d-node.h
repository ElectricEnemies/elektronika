/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	EF3D-NODE.H					(c)	YoY'05						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_EF3DNODE_H_
#define							_EF3DNODE_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<d3d9.h>
#include						<d3dx9mesh.h>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	aestesis DirectX helpers

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Ad3dNode
{
public:
	enum
	{
								stateTOP=1
	};

	char						*name;

	Ad3dNode					*father;
	Ad3dNode					*next;
	Ad3dNode					*prev;
	Ad3dNode					*fchild;
	Ad3dNode					*lchild;

	dword						state;
	IDirect3DDevice9			*d3dev;
	D3DXMATRIX					matrice;


								Ad3dNode						(char *name=NULL, Ad3dNode *father=NULL);
	virtual						~Ad3dNode						();

	virtual bool				init							(IDirect3DDevice9 *d3dev);
	virtual void				release							();
	virtual bool				render							(double beat, dword color) {return true;};

	bool						initAll							(IDirect3DDevice9 *d3dev);
	void						releaseAll						();
	bool						renderAll						(double beat, dword color);

	virtual bool				notify							(Ad3dNode *o, int event, dword p=0);
	void						setName							(char *name);
	void						clear							();		// delete all children
	int							count							();

	// private

	virtual void				add								(Ad3dNode *o);
	virtual void				del								(Ad3dNode *o);
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__inline bool Ad3dNode::notify(Ad3dNode *o, int event, dword p)
{
	if(father)
	{
		if(o==this)
			return father->notify(o, event, p);
		else
			return ((event&0xf000)==0xa000)?father->notify(o, event, p):false;
	}
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Ad3dCube : public Ad3dNode
{
public:

								Ad3dCube						(char *name=NULL, Ad3dNode *father=NULL);
	virtual						~Ad3dCube						();

	virtual bool				init							(IDirect3DDevice9 *d3dev);
	virtual void				release							();

	bool						setTexture						(IDirect3DTexture9 *texture, float tcx=0, float tcy=0);
	virtual bool				render							(double beat, dword color);

	IDirect3DTexture9			*texture;
	float						tcx;
	float						tcy;
	IDirect3DVertexBuffer9		*vb;

	float						size;
	float						xsize;
	float						ysize;
	float						zsize;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							PIX_MAXPX						256
#define							PIX_MAXINPUT					8

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Ad3dPixShader
{
public:
								Ad3dPixShader					();
	virtual						~Ad3dPixShader					();

	bool						init							(IDirect3DDevice9 *d3dev, int npix);
	void						release							();

	IDirect3DPixelShader9		*ps;
    ID3DXEffect					*effect;
	D3DXHANDLE					hColor;
	D3DXHANDLE					hBeat;
	D3DXHANDLE					hRbeat;
	D3DXHANDLE					hBass;
	D3DXHANDLE					hMedium;
	D3DXHANDLE					hTreeble;

	D3DXHANDLE					hPerso[PIX_MAXINPUT];
	char						namePerso[PIX_MAXINPUT][1024];
	int							nperso;
	
	char						filename[PIX_MAXPX][ALIB_PATH];
	int							nfile;

	char						rootdir[1024];
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_EF3DNODE_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	