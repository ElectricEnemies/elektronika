/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _MAIN_H_
#define _MAIN_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"global.h"
#include						"resource.h"
#include						"preview.h"
#include						"status.h"
#include						"background.h"
#include						"about.h"
#include						"config.h"
#include						"password.h"
#include						"registry.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							REGISTRYPATH		"SOFTWARE\\Aestesis\\elektronika"
#ifndef RESELLER
#define							REGISTRYPATH2		"SOFTWARE\\sisetsea\\elektro20"
#else
#define							REGISTRYPATH2		"SOFTWARE\\sisetsea\\resell20"
#endif

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							MAXMODSTAT			1024
#define							MAXBANNED			1024

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct Tstat
{
	char						magic[4];
	qword						flags;
	qword						xorkey;
	qword						launch;				// nb launch
	qword						seconds;			// seconds used
	qword						check;				// last time check name/key in seconds
	qword						netaccess;			// last time net acces in seconds
	
	struct 
	{
		qword					guid;
		qword					nb;
	} module[MAXMODSTAT];

	qword						banned[MAXBANNED];

	qword						reseller;
} Tstat;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class MYflash : public Aflash
{
public:
								MYflash							(char *name, Aobject *l, int x, int y, int w, int h) : Aflash(name, l, x, y, w, h) { }
	virtual void				command							(char *cmd, char *args);
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class MYwindow : public Awindow
{
	AOBJ

	Aitem						*menuBackground;
	Abackground					*backgnd;
	AtitleBar					*tb;
	Apreview					*preview;
	Atable						*table;
	Astatus						*status;
	Aconfig						*config;
	class Adropped				*dropped;
	class AmemUsage				*memuse;
	class Aexplorer				*explorer;
	class Abutton				*bexplorer;
	
	char						reg_name[256];
	char						reg_key[256];

	int							currentBackgnd;
	int							currentReso;
	int							currentRate;
	char						filename[ALIB_PATH];

	Aregistry					*reg;
	Aregistry					*regpwd;
	
								MYwindow						(char *name, int x, int y, int w, int h);
								~MYwindow						();

	void						clear							();

	bool						save							();
	bool						load							();

	void						settings						();

	virtual void				paint							(Abitmap *b);
	virtual bool				notify							(Anode *o, int event, dword p=0);
	virtual bool				mouse							(int x, int y, int state, int event);
	virtual bool				keyboard						(int event, int ascii, int scan, int state);

	virtual bool				size							(int w, int h);

	void						pulse							();
	int							demoTime;
	bool						demo;

	// mouse move 
	int							bac,lx,ly,wx,wy;

	Atooltips					*ttips;
	bool						btips;
	
	Tstat						stats;

	bool						noescape;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__inline qword calcXorKey(char *name, char *key)
{
	qword	q=0;
	char	*n=name;
	char	*k=key;
	int		i;
	
	for(i=0; i<64; i++)
	{
		if(!*n)
			n=name;
		if(!*k)
			k=key;
		q^=*(n++);	
		q^=*(k++);
		q<<=1;
	}
	return q;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
