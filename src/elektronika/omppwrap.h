/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	OMPPWRAP.H					(c)	YoY'04						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef							_OMPPWRAP_H_
#define							_OMPPWRAP_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<interface.h>
#include						"../elektro/elektro.h"
#include						"../../sdk/inc/ompp/ompp.h"
#include						"xmlreader.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							guidOMPPWRAP					(Aomppwrap::CI.guid)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							MAXOMPPPAD						(16)
#define							MAXOMPPPIN						(32)
#define							MAXOMPPMEDIA					(MAXOMPPPIN+MAXOMPPPAD)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum
{
								wrapUNDEFINED=0,
								wrapPAD,
								wrapFLOAT=wrapPAD,
								wrapINTEGER,
								wrapSELECT,
								wrapPIN,
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AinfoOMPP
{
public:
	MediaInfo					media;
	MediaBuffer					*buffer;
	int							wrap;
	int							id;
	
	AinfoOMPP()
	{
		wrap=wrapUNDEFINED;
		id=0;
		memset(&media, 0, sizeof(media));
		buffer=NULL;
	}
	
	~AinfoOMPP()
	{
		if(buffer)
		{
			delete(buffer);
			buffer=null;
		}
	}
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Aomppwrap : public Aeffect
{
public:
	AOBJ

								Aomppwrap						(QIID qiid, char *name, class AomppwrapInfo *info, Acapsule *capsule);
	virtual						~Aomppwrap						();

	virtual bool				save							(Afile *f);
	virtual bool				load							(Afile *f);

	virtual bool				savePreset						(Afile *f);
	virtual bool				loadPreset						(Afile *f);

	virtual int					priority						();
	virtual void				settings						(bool emergency);
	
	virtual void				action							(double time, double dtime, double beat, double dbeat);
	virtual void				actionStart						(double time);
	virtual void				actionStop						();
	
	void						getMediaInfo					();
	class AinfoOMPP *			getInfo							(int type, char *name);
	
	class OmppMediaHost			*host;
	class MediaPluginInfo		*mpi;
	class MediaPlugin			*ompp;
	class AinfoOMPP				media[MAXOMPPMEDIA];
	int							nmedia;
	bool						xmlOK;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AomppwrapFront : public AeffectFront
{
public:
	AOBJ

								AomppwrapFront					(QIID qiid, char *name, Aomppwrap *e, int h);
	virtual						~AomppwrapFront					();

	bool						notify							(Anode *o, int event, dword p);
	void						paint							(Abitmap *b);

	//void						pulse							();
	
	Abitmap						*back;
	Apaddle						*pad[MAXOMPPPAD];
	Astatic						*sta[MAXOMPPPAD];
	int							npad;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define							MAXTRANSOMPP					(256)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct 
{
	Aobject		*object;
	AinfoOMPP	*info;
	int			data;
} AtransOMPP;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AomppwrapFrontXml : public AeffectFront
{
public:
	AOBJ

								AomppwrapFrontXml				(QIID qiid, char *name, Aomppwrap *e, int h, Abitmap *b, xmlNode *node);
	virtual						~AomppwrapFrontXml				();

	bool						notify							(Anode *o, int event, dword p);
	void						paint							(Abitmap *b);

	void						pulse							();
	
	Abitmap						*back;
	AtransOMPP					trans[MAXTRANSOMPP];
	int							ntrans;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AomppwrapBack : public AeffectBack
{
public:
	AOBJ

								AomppwrapBack					(QIID qiid, char *name, Aomppwrap *e, int h, Abitmap *b=null);
	virtual						~AomppwrapBack					();

	void						paint							(Abitmap *b);

	Abitmap						*back;
	Apin						*pin[MAXOMPPPIN];
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class AomppwrapInfo : public AeffectInfo
{
public:
	AOBJ 

								AomppwrapInfo					(char *dll, MediaPluginInfo *mpi, char *name, char *ename, char *ehelp);
								~AomppwrapInfo					();

	void						checkXml						();
								
	virtual int					getEffectClass					();
	virtual dword				version							() { return 0x00020000; }

	virtual Aeffect *			create							(QIID qiid, char *name, Acapsule *capsule);
	
	char						dll[1024];
	xmlDocPtr					xml;
	MediaPluginInfo				*mpi;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void							omppwrapInfos					(class Atable *table, char *dll);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif							//_OMPPWRAP_H
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
