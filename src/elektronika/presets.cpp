/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	PRESETS.CPP					(c)	YoY'03						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"presets.h"
#include						"global.h"
#include						"main.h"
#include						"resource.h"
#include						<math.h>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACI								Apresets::CI=ACI("Apresets", GUID(0x11111111,0x00010005), &Aobject::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Atitem : public Aobject
{
public:
	AOBJ
	
	Astatic						*number;
	Aedit						*text;
	int							selected;
	bool						filled;
	int							n;
		
								Atitem							(char *name, Aobject *father, int x, int y, int w, int h);
								~Atitem							();
								
	void						paint							(Abitmap *b);
	bool						mouse							(int x, int y, int state, int event);
	virtual void				pulse							();
	
	void						select							(int sel);
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACI								Atitem::CI=ACI("Atitem", GUID(0x11111111,0x00010007), &Aobject::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atitem::Atitem(char *name, Aobject *father, int x, int y, int w, int h) : Aobject(name, father, x, y, w, h)
{
	selected=0;
	filled=false;
	n=0;
	
	number=new Astatic("number", this, 2, 2, 38, h-3);
	number->setTooltips("position");
	number->show(true);
	
	text=new Aedit("text", this, 45, 2, w-47, h-3);
	text->colorBackground=0x00000000;
	text->colorBorder=0x00000000;
	text->setTooltips("name");
	text->state&=(~stateENABLE);
	text->show(true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atitem::~Atitem()
{
	delete(number);
	delete(text);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Atitem::paint(Abitmap *b)
{
	switch(selected)
	{
		case 1:
		b->boxf(0, 0, pos.w, pos.h, 0xff202020);
		break;
		
		case 2:
		b->boxf(0, 0, pos.w, pos.h, 0xff202020);
		b->boxfa(0, 0, pos.w, pos.h, 0xffc00000, (float)(1.f-pow(1.f-(float)n/10.f, 3.f)));
		break;

		case 3:
		b->boxf(0, 0, pos.w, pos.h, 0xff202020);
		b->boxfa(0, 0, pos.w, pos.h, 0xff00c000, (float)(1.f-pow(1.f-(float)n/10.f, 3.f)));
		break;
	}
	b->boxfa(2, 1, 38, pos.h-2, 0xffffffff, 0.5f);
	b->boxfa(44, 1, pos.w-3, pos.h-2, 0xffffffff, 0.5f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atitem::mouse(int x, int y, int state, int event)
{
	switch(event)
	{
		case mouseLDOWN:
		focus();
		father->notify(this, nySELECT, 0);
		return true;
	}
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Atitem::pulse()
{
	if(!(n--))
	{
		if(selected)
			selected=1;
		timer();
	}
	repaint();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Atitem::select(int sel)
{
	selected=sel;
	if(sel&&filled)
		text->state|=stateENABLE;
	else
		text->state&=(~stateENABLE);
	if(sel>1)
	{
		n=10;
		timer(50);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Atlist : public Aobject
{
public:
AOBJ
	
	Atitem						*items[128];
	int							thesel;
	
								Atlist							(char *name, Aobject *father, int x, int y, int w, int h);
								~Atlist							();	

	virtual bool				notify							(Anode *o, int event, dword p=0);
	
	void						selected						(int n);
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACI								Atlist::CI=ACI("Atlist", GUID(0x11111111,0x00010008), &Aobject::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atlist::Atlist(char *name, Aobject *father, int x, int y, int w, int h) : Aobject(name, father, x, y, w, h)
{
	Afont	*font=alib.getFont(fontTERMINAL06);
	char	str[128];
	int		i;
	thesel=-1;
	for(i=0; i<128; i++)
	{
		items[i]=new Atitem("items[]", this, 0, i*16, w, 16);
		sprintf(str, "%d", i);		
		items[i]->number->set(str, 0xff202020, font);
		items[i]->text->set("");
		items[i]->show(true);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atlist::~Atlist()
{
	int	i;
	for(i=0; i<128; i++)
		delete(items[i]);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atlist::notify(Anode *o, int event, dword p)
{
	switch(event)
	{
		case nySELECT:
		{
			int	i;
			for(i=0; i<128; i++)
			{
				if(o==items[i])
				{
					thesel=i;
					father->notify(this, nySELECT, (dword)i);
					items[i]->select(1);
				}
				else
					items[i]->select(0);
			}
			repaint();
		}
		return true;
	}
	return Aobject::notify(o, event, p);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Atlist::selected(int sel)
{
	bool	b=false;
	if(thesel>=0)
	{
		items[thesel]->select(sel);
		repaint();
	}
	else
		notify(this, nyALERT, (dword)"no preset slot selected");
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Atovr : public Aobject
{
public:
AOBJ
	
	Atlist						*list;
	
								Atovr							(char *name, Aobject *father, int x, int y, int w, int h);
								~Atovr							();

	bool						notify							(Anode *o, int event, dword p=0);
	bool						mouse							(int x, int y, int state, int event);
	void						paint							(Abitmap *b);
	bool						size							(int w, int h);
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACI								Atovr::CI=ACI("Atovr", GUID(0x11111111,0x00010009), &Aobject::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atovr::Atovr(char *name, Aobject *father, int x, int y, int w, int h) : Aobject(name, father, x, y, w, h)
{
	list=new Atlist("list", this, 0, 0, w, 16*128);
	list->show(true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atovr::~Atovr()
{
	delete(list);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Atovr::paint(Abitmap *b)
{
	b->boxfa(0, 0, pos.w, pos.h, 0xff000000, 0.4f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atovr::mouse(int x, int y, int state, int event)
{
	switch(event)
	{
		case mouseWHEEL:
		{
			int	dy=getWindow()->mouseW;
			int	oy=list->pos.y;
			int	ny=oy+dy;
			if(ny+list->pos.h<pos.h)
				ny=pos.h-list->pos.h;
			if(ny>0)
				ny=0;
			if(ny!=oy)
				list->move(0, ny);
		}
		return true;

		case mouseLDBLCLK:
		father->notify(this, nyDBLCKICK, 0);
		return true;
	}
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atovr::size(int w, int h)
{
	Aobject::size(w, h);
	{
		int	oy=list->pos.y;
		int	ny=oy;
		if(ny+list->pos.h<pos.h)
			ny=pos.h-list->pos.h;
		if(ny>0)
			ny=0;
		if(ny!=oy)
			list->move(0, ny);
	}
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atovr::notify(Anode *o, int event, dword p)
{
	if(father)
		return father->notify(o, event, p);
	return Aobject::notify(o, event, p);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Apresets::Apresets(char *name, Aobject *l, int x, int y, int w, int h) : Aobject(name, l, x, y, w, h)
{
	int	mw=w>>1;
	ovr=new Atovr("ovr", this, 0, 16, w, h-30-16);
	ovr->show(true);
	left=new Abutton("left", this, mw-24-32, h-20, 16, 16, &resource.get(MAKEINTRESOURCE(PNG_PRESET_STORE_ALL), "PNG"));
	left->setTooltips("store preset [all modules]");
	left->show(true);
	lefts=new Abutton("left", this, mw-32, h-20, 16, 16, &resource.get(MAKEINTRESOURCE(PNG_PRESET_STORE_SEL), "PNG"));
	lefts->setTooltips("store preset [selected modules]");
	lefts->show(true);
	rights=new Abutton("right", this, mw+8, h-20, 16, 16, &resource.get(MAKEINTRESOURCE(PNG_PRESET_RECALL_SEL), "PNG"));
	rights->setTooltips("recall preset [selected modules]");
	rights->show(true);
	right=new Abutton("right", this, mw+32, h-20, 16, 16, &resource.get(MAKEINTRESOURCE(PNG_PRESET_RECALL_ALL), "PNG"));
	right->setTooltips("recall preset [all modules]");
	right->show(true);
	del=new Abutton("del", this, mw+96, h-20, 16, 16, &resource.get(MAKEINTRESOURCE(PNG_PRESET_DEL), "PNG"));
	del->setTooltips("delete preset");
	del->show(true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Apresets::~Apresets()
{
	delete(ovr);
	delete(left);
	delete(right);
	delete(lefts);
	delete(rights);
	delete(del);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Apresets::clear()
{
	int	i;
	for(i=0; i<128; i++)
		ovr->list->items[i]->text->set("");
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Apresets::save(Afile *f)
{
	dword	magic=magicPRESETTEXT;
	int		i;
	f->write(&magic, sizeof(magic));
	for(i=0; i<128; i++)
		f->writeString(ovr->list->items[i]->text->caption);
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Apresets::load(Afile *f)
{
	int	offset=(int)f->offset;
	if(magictest(f, magicPRESETTEXT))
	{
		char	*s;
		int		i;
		for(i=0; i<128; i++)
		{
			if(f->readStringAlloc(&s))
			{
				ovr->list->items[i]->text->set(s);
				free(s);
			}
			else
				return false;
		}
		{	// verif
			MYwindow	*w=(MYwindow *)this->getWindow();
			Atable		*table=w->table;
			for(i=0; i<128; i++)
			{
				if(table->preset[i])
				{
					if(!ovr->list->items[i]->text->caption[0])
						ovr->list->items[i]->text->set("FILLED (VERIF TEXT)");
				}
				else
				{
					if(ovr->list->items[i]->text->caption[0])
						ovr->list->items[i]->text->set("");
				}
			}
		}
	}
	else
		f->seek(offset);
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Apresets::notify(Anode *o, int event, dword p)
{
	switch(event)
	{
		case nyCLICK:
		if((o==left)||(o==lefts))
		{
			if(ovr->list->thesel>=0)
			{
				MYwindow	*w=(MYwindow *)this->getWindow();
				Atable		*table=w->table;
				table->savePreset(ovr->list->thesel, (o==left));
				if(ovr->list->items[ovr->list->thesel]->text->caption[0]==0)
					ovr->list->items[ovr->list->thesel]->text->set("FILLED");
				ovr->list->selected(2);
			}
			else
				notify(this, nyALERT, (dword)"no preset slot selected");

		}
		else if((o==right)||(o==rights))
		{
			if(ovr->list->thesel>=0)
			{
				MYwindow	*w=(MYwindow *)this->getWindow();
				Atable		*table=w->table;
				if(table->preset[ovr->list->thesel])
				{
					table->loadPreset(ovr->list->thesel, (o==right));
					ovr->list->selected(3);
				}
				else
					notify(this, nyALERT, (dword)"no preset in the selected slot");
			}
			else
				notify(this, nyALERT, (dword)"no preset slot selected");
		}
		else if(o==del)
		{
			if(ovr->list->thesel>=0)
			{
				MYwindow	*w=(MYwindow *)this->getWindow();
				Atable		*table=w->table;
				if(table->preset[ovr->list->thesel])
				{
					table->clearPreset(ovr->list->thesel);
					ovr->list->items[ovr->list->thesel]->text->caption[0]=0;
					ovr->list->selected(2);
				}
				else
					notify(this, nyALERT, (dword)"no preset in the selected slot");
			}
			else
				notify(this, nyALERT, (dword)"no preset slot selected");
		}
		break;
		
		case nyDBLCKICK:
		if(ovr->list->thesel>=0)
		{
			MYwindow	*w=(MYwindow *)this->getWindow();
			Atable		*table=w->table;
			if(table->preset[ovr->list->thesel])
			{
				table->loadPreset(ovr->list->thesel, true);
				ovr->list->selected(3);
			}
			else
				notify(this, nyALERT, (dword)"no preset in the selected slot");
		}
		return true;
		
		case nySELECT:
		if(o==ovr->list)
		{
			MYwindow	*w=(MYwindow *)getWindow();
			Atable		*table=w->table;
			ovr->list->items[p]->filled=table->preset[p]?true:false;
		}
		return true;
	}
	return Aobject::notify(o, event, p);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Apresets::paint(Abitmap *b)
{
	int	y0=ovr->pos.y+ovr->pos.h;
	b->boxfa(0, 0, pos.w, 15, 0xff000000, 0.5f);
	b->boxfa(0, y0, pos.w, y0+4, 0xff000000, 0.5f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Apresets::size(int w, int h)
{
	Aobject::size(w, h);
	left->pos.y=h-20;
	right->pos.y=h-20;
	lefts->pos.y=h-20;
	rights->pos.y=h-20;
	del->pos.y=h-20;
	return ovr->size(w, h-30-16);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
