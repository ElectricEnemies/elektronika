/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	TRAIL.CPP					(c)	YoY'03						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						<math.h>
#include						<assert.h>
#include						"resource.h"
#include						"trail.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACI								AtrailInfo::CI	= ACI("AtrailInfo",		GUID(0x11111112,0x00000400), &AeffectInfo::CI, 0, NULL);
ACI								Atrail::CI		= ACI("Atrail",			GUID(0x11111112,0x00000401), &Aeffect::CI, 0, NULL);
ACI								AtrailFront::CI	= ACI("AtrailFront",	GUID(0x11111112,0x00000402), &AeffectFront::CI, 0, NULL);
ACI								AtrailBack::CI	= ACI("AtrailBack",		GUID(0x11111112,0x00000403), &AeffectBack::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atrail::Atrail(QIID qiid, char *name, AeffectInfo *info, Acapsule *capsule) : Aeffect(qiid, name, info, capsule)
{
	image=new Abitmap(getVideoWidth(), getVideoHeight());
	front=new AtrailFront(qiid, "trail front", this, 48);
	front->setTooltips("trail module");
	back=new AtrailBack(qiid, "trail back", this, 48);
	back->setTooltips("trail module");
	settings(false);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atrail::~Atrail()
{
	delete(image);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atrail::load(class Afile *f)
{
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atrail::save(class Afile *f)
{
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Atrail::settings(bool emergency)
{
	image->size(getVideoWidth(), getVideoHeight());
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__inline void coladd(int *r, int *g, int *b, dword c)
{
	byte	br,bg,bb;
	colorRGB(&br, &bg, &bb, c);
	*r+=(int)br;
	*g+=(int)bg;
	*b+=(int)bb;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Atrail::action(double time, double dtime, double beat, double dbeat)
{
	AtrailFront		*front=(AtrailFront *)this->front;
	AtrailBack		*back=(AtrailBack *)this->back;
	Abitmap			*bb=back->out->getBitmap();
	Abitmap			*bin=back->in->getBitmap();

	if(bb)
	{
		float	flevel=front->fade->get();
		dword	fcolor=front->fadecolor->get();
		float	level=front->level->get();
		float	blur=front->blur->get();
		float	zlevel=front->zlevel->get();
		float	zzoom=front->zzoom->get();
		float	drop=front->drop->get();
		int		w=bb->w;
		int		h=bb->h;
			
		if(flevel>0.f)
			bb->boxfa(0, 0, bb->w, bb->h, fcolor, flevel);

		if(zlevel>0.f)
		{		
			double	zz=pow((zzoom-0.5)*3, 3);
			int		zx=(int)((zz<0)?(zz*w*0.2963):(zz*w));
			int		zy=(int)((zz<0)?(zz*h*0.2963):(zz*h));
			
			image->set(0, 0, bb, bitmapNORMAL, bitmapNORMAL);
			
			image->state=bitmapNORMAL;
			image->flags=bitmapGLOBALALPHA;
			image->alpha=zlevel;
			bb->set(-zx, -zy, w+zx*2, h+zy*2, 0, 0, w, h, image, bitmapDEFAULT, bitmapDEFAULT);
			image->state=bitmapNORMAL;
			image->flags=0;
			image->alpha=0.f;
		}

		if(drop>0.f)
		{
			double	obeat=beat-dbeat;
			double	dt=drop;
			int		nbdt=(int)(beat/dt);
			int		nodt=(int)(obeat/dt);
			if(nbdt==nodt)
				level=0.f;
		}

		if(bin&&(level>0.f))
		{
			double	zz=pow((front->zoom->get()-0.5)*3, 3);
			int		zx=(int)((zz<0)?(zz*w*0.2963):(zz*w));
			int		zy=(int)((zz<0)?(zz*h*0.2963):(zz*h));

			switch(front->blend->get())
			{
				case 0:
				bin->state=bitmapNORMAL;
				bin->flags=bitmapGLOBALALPHA;
				break;

				case 1:
				bin->state=bitmapADD;
				bin->flags=bitmapGLOBALALPHA|bitmapSATURATION;
				break;

				case 2:
				bin->state=bitmapSUB;
				bin->flags=bitmapGLOBALALPHA|bitmapSATURATION;
				break;
			}

			bin->alpha=level;
			bb->set(-zx, -zy, w+zx*2, h+zy*2, 0, 0, w, h, bin, bitmapDEFAULT, bitmapDEFAULT);
		}

		if(blur>0.f)
		{
			dword	*s=bb->body32;
			dword	*d=image->body32;
			int		nw=w-1;
			int		nh=h-1;
			int		x,y;
			
			{
				int		n=w+1;
				for(y=1; y<nh; y++)
				{
					for(x=1; x<nw; x++)
					{
						int		nm=n-w;
						int		np=n+w;
						
						int		r=0;
						int		g=0;
						int		b=0;
						
						coladd(&r, &g, &b, s[nm-1]);
						coladd(&r, &g, &b, s[nm]);
						coladd(&r, &g, &b, s[nm+1]);
						coladd(&r, &g, &b, s[n-1]);
						coladd(&r, &g, &b, s[n+1]);
						coladd(&r, &g, &b, s[np-1]);
						coladd(&r, &g, &b, s[np]);
						coladd(&r, &g, &b, s[np+1]);
						
						d[n]=color32(r>>3, g>>3, b>>3);					
						
						n++;
					}
					n+=2;
				}
			}
			for(x=1; x<nw; x++)
			{
				int		nx=(h-1)*w+x;
				int		np=x+w;
				int		nm=nx-w;
				
				int	r=0;
				int	g=0;
				int	b=0;
				
				coladd(&r, &g, &b, s[x-1]);
				coladd(&r, &g, &b, s[x+1]);
				coladd(&r, &g, &b, s[np-1]);
				coladd(&r, &g, &b, s[np]);
				coladd(&r, &g, &b, s[np+1]);
				d[x]=color32(r/5, g/5, b/5);
				
				r=g=b=0;
				
				coladd(&r, &g, &b, s[nx-1]);
				coladd(&r, &g, &b, s[nx+1]);
				coladd(&r, &g, &b, s[nm-1]);
				coladd(&r, &g, &b, s[nm]);
				coladd(&r, &g, &b, s[nm+1]);
				d[nx]=color32(r/5, g/5, b/5);
			}
			{
				for(y=1; y<nh; y++)
				{
					int	ny0=y*w;
					int	ny1=ny0+(w-1);
					int	nm0=ny0-w;
					int	np0=ny0+w;
					int	nm1=ny1-w;
					int	np1=ny1+w;
					
					int	r=0;
					int	g=0;
					int	b=0;

					coladd(&r, &g, &b, s[nm0]);
					coladd(&r, &g, &b, s[nm0+1]);
					coladd(&r, &g, &b, s[ny0+1]);
					coladd(&r, &g, &b, s[np0]);
					coladd(&r, &g, &b, s[np0+1]);
					d[ny0]=color32(r/5, g/5, b/5);

					r=g=b=0;

					coladd(&r, &g, &b, s[nm1-1]);
					coladd(&r, &g, &b, s[nm1]);
					coladd(&r, &g, &b, s[ny1-1]);
					coladd(&r, &g, &b, s[np1-1]);
					coladd(&r, &g, &b, s[np1]);
					d[ny1]=color32(r/5, g/5, b/5);
				}
			}

			image->state=bitmapNORMAL;
			image->flags=bitmapGLOBALALPHA;
			image->alpha=blur;
			bb->set(0, 0, image, bitmapDEFAULT, bitmapDEFAULT);
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AtrailFront::AtrailFront(QIID qiid, char *name, Atrail *e, int h) : AeffectFront(qiid, name, e, h)
{
	Aresobj	o=resource.get(MAKEINTRESOURCE(PNG_TRAIL_FRONT), "PNG");
	back=new Abitmap(&o);

	fade=new Apaddle(MKQIID(qiid,0x25cc4eaf69a80780), "fade level", this, 40, 14, paddleYOLI24);
	fade->setTooltips("fade level");
	fade->set(0.f);
	fade->show(TRUE);
	
	fadecolor=new Aselcolor(MKQIID(qiid,0x67f13db86e30eb90), "fade color", this, 70, 18);
	fadecolor->setTooltips("fade color");
	fadecolor->border=0xff343856;
	fadecolor->set(0xff000000);
	fadecolor->show(true);

	level=new Apaddle(MKQIID(qiid,0x8631f8a47e51cfa0), "source level", this, 258, 6, paddleYOLI32);	// 160
	level->setTooltips("source level");
	level->set(1.f);
	level->show(TRUE);
	
	zoom=new Apaddle(MKQIID(qiid,0x7f656817bc731000), "source zoom", this, 292, 28, paddleYOLI16);
	zoom->setTooltips("source zoom");
	zoom->set(0.5f);
	zoom->show(TRUE);
	
	drop=new Apaddle(MKQIID(qiid,0x7f6fc52cbc731000), "drop frames", this, 292, 4, paddleYOLI16);
	drop->setTooltips("drop frames");
	drop->set(0.f);
	drop->show(TRUE);
	
	blend=new Aselect(MKQIID(qiid,0xc4a59f9880536a40), "blend", this, 234, 4, 1, 3, &resource.get(MAKEINTRESOURCE(PNG_MIMIX_BLEND), "PNG"), 12, 12);
	blend->setTooltips("blend mode");
	blend->set(0);
	blend->show(TRUE);

	blur=new Apaddle(MKQIID(qiid,0x0ff1bf6bff3e6cd8), "blur level", this, 370, 14, paddleYOLI24);
	blur->setTooltips("blur level");
	blur->set(0.f);
	blur->show(TRUE);

	zlevel=new Apaddle(MKQIID(qiid,0x6cba81d65311f960), "feedback level", this, 140, 10, paddleYOLI24);
	zlevel->setTooltips("feedback level");
	zlevel->set(0.f);
	zlevel->show(TRUE);
	
	zzoom=new Apaddle(MKQIID(qiid,0x443efbd9d32d1b80), "feedback zoom", this, 164, 28, paddleYOLI16);
	zzoom->setTooltips("feedback zoom");
	zzoom->set(0.5f);
	zzoom->show(TRUE);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AtrailFront::~AtrailFront()
{
	delete(fade);
	delete(fadecolor);
	delete(level);
	delete(zoom);
	delete(drop);
	delete(blend);
	delete(blur);
	delete(zlevel);
	delete(zzoom);
	delete(back);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AtrailFront::paint(Abitmap *b)
{
	b->set(0, 0, back, bitmapDEFAULT, bitmapDEFAULT);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool AtrailFront::notify(Anode *o, int event, dword p)
{
	switch(event)
	{
		case nyCHANGE:
		break;
	}
	return AeffectFront::notify(o, event, p);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AtrailBack::AtrailBack(QIID qiid, char *name, Atrail *e, int h) : AeffectBack(qiid, name, e, h)
{
	Aresobj	o=resource.get(MAKEINTRESOURCE(PNG_TRAIL_BACK), "PNG");
	back=new Abitmap(&o);

	in=new Avideo(MKQIID(qiid,0x184af6d1cede8d94), "video in", this, pinIN, 10, 10);
	in->setTooltips("video in");
	in->show(TRUE);
	
	out=new Avideo(MKQIID(qiid,0xd59faf06a376b03a), "video out", this, pinOUT, pos.w-18, 10);
	out->setTooltips("video out");
	out->show(TRUE);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AtrailBack::~AtrailBack()
{
	delete(back);
	delete(in);
	delete(out);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AtrailBack::paint(Abitmap *b)
{
	b->set(0, 0, back, bitmapDEFAULT, bitmapDEFAULT);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Aeffect * AtrailInfo::create(QIID qiid, char *name, Acapsule *capsule)
{
	return new Atrail(qiid, name, this, capsule);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Aplugz * trailGetInfo()
{
	return new AtrailInfo("trailInfo", &Atrail::CI, "trail", "trail module");
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
