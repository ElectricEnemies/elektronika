/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	TRANS-FADE.CPP				(c)	YoY'01						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"trans-fade.h"
#include						"resource.h"
#include						<math.h>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACI								AtransfadeInfo::CI	= ACI("AtransfadeInfo",	GUID(0x11111112,0xA0000010), &AtransitionInfo::CI, 0, NULL);
ACI								Atransfade::CI		= ACI("Atransfade",		GUID(0x11111112,0xA0000011), &Atransition::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int						count=0;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void init()
{
	count++;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void end()
{
	count--;
	if(count==0)
	{
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atransfade::Atransfade(QIID qiid, char *name, Aobject *f, int x, int y) : Atransition(qiid, name, f, x, y)
{
	char	str[256];
	init();

	sprintf(str, "%s/cut", name);
	cut=new ActrlButton(MKQIID(qiid, 0x8fa96a256e039bcc), str, this, 16, 16, 16, 16, &resource.get(MAKEINTRESOURCE(PNG_VMIX_CUT), "PNG"), Abutton::bt2STATES|Abutton::btBITMAP);
	cut->setTooltips("cut mode");
	cut->set(false);
	cut->show(true);
	
	sprintf(str, "%s/color", name);
	color=new Aselcolor(MKQIID(qiid, 0x06c824e402bc37e0), str, this, 16, 36);
	color->setTooltips("fade color");
	color->set(0xff000000);
	color->show(true);

	sprintf(str, "%s/aspect", name);
	ratio=new Apaddle(MKQIID(qiid, 0x995a25d0e569d2b0), str, this, 56, 20, paddleYOLI32);
	ratio->setTooltips("fade aspect");
	ratio->set(0.5f);
	ratio->show(true);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atransfade::~Atransfade()
{
	delete(cut);
	delete(ratio);
	delete(color);
	end();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atransfade::notify(Anode *o, int event, dword p)
{
	return Aobject::notify(o, event, p);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Atransfade::paint(Abitmap *b)
{
	b->boxfa(8, 8, 112, 58, 0xff000040, 0.4f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atransfade::save(class Afile *f)
{
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atransfade::load(class Afile *f)
{
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Atransfade::settings(bool emergency)
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool	test=false;	// 4debug

bool Atransfade::action(Abitmap *out, Abitmap *b0, Abitmap *b1, float cross, int src, float power, Abitmap *in[8])
{
	dword	color=this->color->get();
	float	aspect=this->ratio->get();
	float	aspectpow=fabs(aspect-0.5f)*2.f;
	float	bright=power;
	bool	cut=this->cut->get();
	float	fade=mini(bright+fabs(aspect-0.5f), 1.f);
	int		w=out->w;
	int		h=out->h;

	if(cut)
		cross=(cross>0.5f)?1.f:0.f;
	
	float	dm=(float)(pow((1.0-fabs(sin(cross*PI+PI*0.5)))*3.0, ((double)aspectpow*5.0+1.0)))*aspectpow;
	float	dw=(aspect>0.5f)?(aspectpow*3.f):0.f;
	float	dh=(aspect<0.5f)?(aspectpow*3.f):0.f;
	
	int		idw=maxi((int)(dw*dm*(float)w), 0);
	int		idh=maxi((int)(dh*dm*(float)h), 0);
		
	out->boxf(0, 0, w, h, 0xff000000);
	
	if(b0)
	{
		b0->alpha=bright*((cross<0.5f)?1.f:0.f)+(1.f-bright)*(1.f-cross);
		out->set(-idw, -idh, w+idw*2, h+idh*2, 0, 0, w, h, b0, bitmapADD, bitmapGLOBALALPHA|bitmapSATURATION);
	}
	if(b1)
	{
		b1->alpha=bright*((cross>0.5f)?1.f:0.f)+(1.f-bright)*cross;
		out->set(-idw, -idh, w+idw*2, h+idh*2, 0, 0, w, h, b1, bitmapADD, bitmapGLOBALALPHA|bitmapSATURATION);
	}

	if(bright>0.f)
	{
		float	br=(float)(pow(sin(cross*PI), (double)bright*5.0+1.f))*bright;
		out->boxfa(0, 0, w, h, color, br);
	}
	
	return TRUE;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atransition * AtransfadeInfo::create(QIID qiid, char *name, Aobject *father, int x, int y)
{
	return new Atransfade(qiid, name, father, x, y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Aplugz * transfadeGetInfo()
{
	return new AtransfadeInfo("fade", &Atransfade::CI, "fade", "fade");
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
