/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	TRANS-LUMA.CPP				(c)	YoY'04						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"trans-luma.h"
#include						"resource.h"
#include						<math.h>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACI								AtranslumaInfo::CI	= ACI("AtranslumaInfo",	GUID(0x11111112,0xA0000030), &AtransitionInfo::CI, 0, NULL);
ACI								Atransluma::CI		= ACI("Atransluma",		GUID(0x11111112,0xA0000031), &Atransition::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int						count=0;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void init()
{
	count++;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void end()
{
	count--;
	if(count==0)
	{
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atransluma::Atransluma(QIID qiid, char *name, Aobject *f, int x, int y) : Atransition(qiid, name, f, x, y)
{
	init();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atransluma::~Atransluma()
{
	end();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atransluma::notify(Anode *o, int event, dword p)
{
	return Aobject::notify(o, event, p);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Atransluma::paint(Abitmap *b)
{
/*
	Afont	*f=alib.getFont(fontCONFIDENTIAL14);
	b->boxfa(0, 0, pos.w, pos.h, 0xff000000, 0.1f);
	f->set(b, 10, 10, "LUMA TRANSITION", 0xff404040);
*/
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atransluma::save(class Afile *f)
{
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atransluma::load(class Afile *f)
{
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Atransluma::settings(bool emergency)
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Atransluma::action(Abitmap *out, Abitmap *b0, Abitmap *b1, float cross, int src, float power, Abitmap *in[8])
{
	int		w=out->w;
	int		h=out->h;
	bool	bInv=(src!=0);

	if(bInv)
	{
		if(b0)
			out->set(0, 0, b0);
		else
			out->boxf(0, 0, w, h, 0xff000000);
		if(b1)
			luma(out, b1, cross, power);
	}
	else
	{
		if(b1)
			out->set(0, 0, b1);
		else
			out->boxf(0, 0, w, h, 0xff000000);
		if(b0)
			luma(out, b0, 1.f-cross, power);
	}
	return TRUE;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Atransluma::luma(Abitmap *out, Abitmap *in, float value, float fade)
{
	int		w=out->w;
	int		h=out->h;
	int		x,y;
	dword	*s=in->body32;
	dword	*d=out->body32;
	int		a=(int)(value*value*256.f);
	int		a0=256-a;
	int		f=(int)(fade*fade*195076.f);
	int		f0=f-8192;

	for(y=0; y<h; y++)
	{
		int		vd;
		
		for(x=0; x<w; x++)
		{
			byte	r,g,b;
			int		r0,g0,b0;

			colorRGB(&r, &g, &b, *s);

			r0=(int)r;
			g0=(int)g;
			b0=(int)b;

			vd=r0*r0+g0*g0+b0*b0;

			if(vd>=f)
			{
				byte	rd,gd,bd;
				colorRGB(&rd, &gd, &bd, *d);
				*d=color32(((int)r*a+(int)rd*a0)>>8, ((int)g*a+(int)gd*a0)>>8, ((int)b*a+(int)bd*a0)>>8);
			}
			else if(vd>=f0)
			{
				int		am=a*(vd-f0)/(32*256);
				int		am0=256-am;
				byte	rd,gd,bd;
				colorRGB(&rd, &gd, &bd, *d);
				*d=color32(((int)r*am+(int)rd*am0)>>8, ((int)g*am+(int)gd*am0)>>8, ((int)b*am+(int)bd*am0)>>8);
			}
			
			s++;
			d++;
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atransition * AtranslumaInfo::create(QIID qiid, char *name, Aobject *father, int x, int y)
{
	return new Atransluma(qiid, name, father, x, y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Aplugz * translumaGetInfo()
{
	return new AtranslumaInfo("luma key", &Atransluma::CI, "luma key", "luma key");
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
