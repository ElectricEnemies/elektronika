/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	ef3f-cube.CPP				(c)	YoY'05						WEB: www.aestesis.org
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include						"ef3d-cube.h"
#include						"resource.h"
#include						<math.h>
#include						<d3d9.h>
#include						<D3dx9mesh.h>
#include						<assert.h>
#include						"ef3d-node.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACI								Aef3dcubeInfo::CI	= ACI("Aef3dcubeInfo",	GUID(0x11111112,0xB0000140), &Aeffect3dInfo::CI, 0, NULL);
ACI								Aef3dcube::CI		= ACI("Aef3dcube",		GUID(0x11111112,0xB0000141), &Aeffect3d::CI, 0, NULL);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Adatacube
{
public:
	float						azoom;
	class Ad3dCube				*cube;
	
	Adatacube()
	{
		azoom=0.f;
		cube=null;
	}
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int						count=0;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void init()
{
	count++;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void end()
{
	count--;
	if(count==0)
	{
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static char *efn[]=
{
	"vertical",
	"horizontal",
	"radial zoom",
	"radial wave",
	"vertical wave",
	"horizontal wave",
	"chaos swirl",
	"swirl"
};

static char *efan[]=
{
	"bass zoom",
	"bass XL",
	"medium vibes"
};

static QIID qiidefa[]={ 0x076fbb9346361b98, 0x49eb36606e48f116, 0x8561c3da74dec298};
static QIID qiidef[]={ 0x893a68d125a7a828, 0x89de3894828770c0, 0x08358b040633ec7a, 0x8779ad2515620000,
					0x3aca10469834864c, 0xd496d24858d43dd0, 0x76071c22d1d3ffb8, 0xe275b630ea6b3f90};

Aef3dcube::Aef3dcube(QIID qiid, char *name, Aobject *f, int x, int y) : Aeffect3d(qiid, name, f, x, y)
{
	char	str[1024];
	Aresobj	o=resource.get(MAKEINTRESOURCE(PNG_MORPH), "PNG");
	back=new Abitmap(&o);

	setTooltips("cube effect");
	
	init();
	dt=new Adatacube();
	dt->cube=new Ad3dCube("cube");
	
	sprintf(str, "%s/zoom", name);
	zoom=new Apaddle(MKQIID(qiid,0x240ac205d619ee10), str, this, 64, 16, paddleELEK16);
	zoom->setTooltips("zoom");
	zoom->set(0.5f);
	zoom->show(TRUE);

	sprintf(str, "%s/amplitude", name);
	mastef=new Apaddle(MKQIID(qiid,0x04ac213374106d9e), str, this, 16+44, 41, paddleELEK24);
	mastef->setTooltips("amplitude");
	mastef->set(0.5f);
	mastef->show(TRUE);

	{
		int	i;
		for(i=0; i<8; i++)
		{
			int	y=(i<4)?34:58;
			int	n=i&3;
			sprintf(str, "%s/%s", name, efn[i]);
			ef[i]=new Apaddle(MKQIID(qiid,qiidef[i]), str, this, 16+n*24+((n>>1)*24), y, paddleELEK16);
			ef[i]->setTooltips(efn[i]);
			ef[i]->set(0.f);
			ef[i]->show(TRUE);
		}
	}
	
	{
		int	i;
		for(i=0; i<3; i++)
		{
			int	n=i&3;
			sprintf(str, "%s/%s", name, efan[i]);
			efa[i]=new Apaddle(MKQIID(qiid,qiidefa[i]), str, this, 146+n*24, 46, paddleELEK16);
			efa[i]->setTooltips(efan[i]);
			efa[i]->set(0.f);
			efa[i]->show(TRUE);
		}
	}
/*
	zoom=new Apaddle("zoom", this, 160, 16, paddleELEK16);
	zoom->setTooltips("zoom");
	zoom->set(0.5f);
	zoom->show(TRUE);

	mastef=new Apaddle("amplitude", this, 264, 14, paddleELEK24);
	mastef->setTooltips("amplitude");
	mastef->set(0.5f);
	mastef->show(TRUE);

	{
		int	i;
		for(i=0; i<8; i++)
		{
			int	y=(i<4)?6:30;
			int	n=i&3;
			ef[i]=new Apaddle(efn[i], this, 220+n*24+((n>>1)*24), y, paddleELEK16);
			ef[i]->setTooltips(efn[i]);
			ef[i]->set(0.f);
			ef[i]->show(TRUE);
		}
	}
	
	{
		int	i;
		for(i=0; i<3; i++)
		{
			int	n=i&3;
			efa[i]=new Apaddle(efan[i], this, 350+n*24, 16, paddleELEK16);
			efa[i]->setTooltips(efan[i]);
			efa[i]->set(0.f);
			efa[i]->show(TRUE);
		}
	}
*/	
	settings();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Aef3dcube::~Aef3dcube()
{
	int	i;
	for(i=0; i<8; i++)
		delete(ef[i]);
	for(i=0; i<3; i++)
		delete(efa[i]);
	delete(mastef);
	delete(zoom);
	delete(dt->cube);
	delete(dt);
	delete(back);
	end();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dcube::notify(Anode *o, int event, dword p)
{
	return Aobject::notify(o, event, p);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Aef3dcube::paint(Abitmap *b)
{
	b->set(0, 0, back, bitmapDEFAULT, bitmapDEFAULT);
	//b->boxfa(0, 0, pos.w, pos.h, 0xff000000, 0.1f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dcube::save(class Afile *f)
{
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dcube::load(class Afile *f)
{
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Aef3dcube::settings()
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


bool Aef3dcube::init3D(class Aef3dInfo *info)
{
	return dt->cube->initAll(info->d3d->d3dev);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dcube::release3D(class Aef3dInfo *info)
{
	dt->cube->releaseAll();
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dcube::action(Aef3dInfo *info)
{
	Aeffect				*e=Aeffect::getEffect(this);
	Ad3d				*d3d=info->d3d;
	HRESULT				r;
	int					texType;
	float				texCx,texCy;
	byte				rc,gc,bc;
	IDirect3DTexture9	*tex=info->input->getTexture(&texType, &texCx, &texCy);
	dword				color;

	if(!tex)
		return false;

	colorRGB(&rc,&gc, &bc, info->color);
	color=D3DCOLOR_RGBA(rc, gc, bc, (int)(info->power*255.99f));
	
	d3d->d3dev->BeginScene();

	dt->cube->setTexture(tex, texCx, texCy);
	tex->Release();
	
	
	r=d3d->d3dev->SetSamplerState(0, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR);
	r=d3d->d3dev->SetSamplerState(0, D3DSAMP_MINFILTER, D3DTEXF_LINEAR);
	
	r=d3d->d3dev->SetTextureStageState(0, D3DTSS_TEXCOORDINDEX, D3DTSS_TCI_PASSTHRU);

	r=d3d->d3dev->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_DIFFUSE);
	r=d3d->d3dev->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

	r=d3d->d3dev->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
	r=d3d->d3dev->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
	
	if(info->colorBoost)
		r=d3d->d3dev->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE2X);
	else
		r=d3d->d3dev->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

	r=d3d->d3dev->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);
	
	switch(info->bm)
	{
		case Aef3dInfo::blendFADE:	// normal
		r=d3d->d3dev->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
		r=d3d->d3dev->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);
		r=d3d->d3dev->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);
		break;
		
		case Aef3dInfo::blendADD:	// add
		r=d3d->d3dev->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
		r=d3d->d3dev->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);
		r=d3d->d3dev->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);
		break;

		case Aef3dInfo::blendSUB:	// sub
		r=d3d->d3dev->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
		r=d3d->d3dev->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);
		r=d3d->d3dev->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_REVSUBTRACT);
		break;
	}
	
	d3d->d3dev->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);
        
	dt->cube->renderAll(info->beat, color);

	d3d->d3dev->EndScene();

	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Aef3dcube::fillSurface()
{
	int	x;
	if((mastef->get()==0.f)&&(zoom->get()>=0.5f))
		return true;
	for(x=0; x<8; x++)
	{
		if(ef[x]->get()!=0.f)
			return false;
	}
	for(x=0; x<3; x++)
	{
		if(efa[x]->get()!=0.f)
			return false;
	}
	if(zoom->get()<0.5f)
		return false;
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Aeffect3d * Aef3dcubeInfo::create(QIID qiid, char *name, Aobject *father, int x, int y)
{
	return new Aef3dcube(qiid, name, father, x, y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Aplugz * ef3dcubeGetInfo()
{
	return new Aef3dcubeInfo("cube", &Aef3dcube::CI, "cube", "cube");
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
