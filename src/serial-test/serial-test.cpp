// serial-test.cpp : Defines the entry point for the console application.
//

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <tchar.h>
#include "interface.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct
{
	byte	stx;
	byte	rcvadr;
	byte	sndadr;
	byte	cmd1;
	byte	cmd2;
	byte	data1;
	byte	data2;
	byte	data3;
	byte	data4;
	byte	etx;
	byte	chk;
} campck;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int realsend(int recever, Aserial *s, campck cp)	// calc checksum & send packet
{
	cp.stx=0xa0;
	cp.etx=0xaf;
	cp.rcvadr=recever;
	cp.sndadr=0;
	cp.chk=(byte)(0xffff-((dword)cp.rcvadr+(dword)cp.sndadr+(dword)cp.cmd1+(dword)cp.cmd2+(dword)cp.data1+(dword)cp.data2+(dword)cp.data3+(dword)cp.data4));
	return s->write(&cp, sizeof(cp));;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int send(int recever, Aserial *s, campck cp)
{
	int	n=realsend(recever, s, cp);
	s->flush();
	return 	n;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int movecam(Aserial *s, int pan, int tile, int zoom)
{
	campck	cp;
	memset(&cp, 0, sizeof(cp));
	
	if(pan>0)
		cp.cmd2|=2;		// pan right
	else if(pan<0)
		cp.cmd2|=4;		// pan left
		
	if(tile>0)
		cp.cmd2|=16;	// tile down
	else if(tile<0)
		cp.cmd2|=8;		// tile up
		
	if(zoom>0)
		cp.cmd2|=32;	// zoom
	else if(zoom<0)
		cp.cmd2|=64;	// unzoom
		
	cp.data1=mini(abs(pan), 0x40);
	cp.data2=mini(abs(tile), 0x40);
	cp.data3=mini(abs(zoom), 8);
	cp.data3|=cp.data3<<4;

	return send(2, s, cp);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int setpreset(Aserial *s, int pnum)
{
	campck	cp;
	memset(&cp, 0, sizeof(cp));
	cp.cmd1=0;
	cp.cmd2=0x03;
	cp.data1=pnum&0x3f;
	cp.data2=0xff;
	cp.data3=0xff;
	cp.data3=0xff;

	return send(2, s, cp);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int movepreset(Aserial *s, int pnum)
{
	campck	cp;
	memset(&cp, 0, sizeof(cp));
	cp.cmd1=0;
	cp.cmd2=0x07;
	cp.data1=pnum&0x3f;
	cp.data2=0xff;
	cp.data3=0xff;
	cp.data3=0xff;

	return send(2, s, cp);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _tmain(int argc, _TCHAR* argv[])
{
	Aserial	*s=new Aserial("com1");
	if(s->isOK())
	{
		if(s->configure(Aserial::Baud9600, Aserial::Data8, Aserial::ParNone, Aserial::Stop1, true))
		{
			if(s->timeouts(50, 50, 50, 0, 0))
			{
				int	r=0;
				int	n=0;
				int	i;

				for(i=0; i<3; i++)
				{
					movecam(s, ((rand()%3)-1)*64, ((rand()%3)-1)*64, ((rand()%3)-1)*8);
					Athread::sleep(1000);
					movecam(s, ((rand()%3)-1)*64, ((rand()%3)-1)*64, ((rand()%3)-1)*8);
					Athread::sleep(1000);
					movecam(s, ((rand()%3)-1)*64, ((rand()%3)-1)*64, ((rand()%3)-1)*8);
					Athread::sleep(1000);
					movecam(s, 0, 0, 0);
					Athread::sleep(100);
					setpreset(s, i);
					Athread::sleep(100);
				}
			}
		}
	}
	//delete(s);
	return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
